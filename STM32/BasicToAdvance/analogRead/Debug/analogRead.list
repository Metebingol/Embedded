
analogRead.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a3c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002afc  08002afc  00012afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b2c  08002b2c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002b2c  08002b2c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b2c  08002b2c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b2c  08002b2c  00012b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b30  08002b30  00012b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000004  08002b38  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08002b38  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db35  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b91  00000000  00000000  0002db61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000948  00000000  00000000  0002f6f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000880  00000000  00000000  00030040  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f668  00000000  00000000  000308c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008bd5  00000000  00000000  0003ff28  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00053f77  00000000  00000000  00048afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009ca74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020b0  00000000  00000000  0009caf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ae4 	.word	0x08002ae4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002ae4 	.word	0x08002ae4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f002 fadd 	bl	80027f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f001 fb22 	bl	8001898 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 fd39 	bl	8000cda <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 fd1d 	bl	8000cb0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000020 	.word	0x20000020

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000020 	.word	0x20000020

080002ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b4:	f7ff fff0 	bl	8000298 <HAL_GetTick>
 80002b8:	0003      	movs	r3, r0
 80002ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	d002      	beq.n	80002cc <HAL_Delay+0x20>
  {
     wait++;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	f7ff ffe3 	bl	8000298 <HAL_GetTick>
 80002d2:	0002      	movs	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d8f7      	bhi.n	80002ce <HAL_Delay+0x22>
  {
  }
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b004      	add	sp, #16
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002f0:	230f      	movs	r3, #15
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	2200      	movs	r2, #0
 80002f6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d101      	bne.n	8000306 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000302:	2301      	movs	r3, #1
 8000304:	e124      	b.n	8000550 <HAL_ADC_Init+0x268>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800030a:	2b00      	cmp	r3, #0
 800030c:	d10a      	bne.n	8000324 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2200      	movs	r2, #0
 8000312:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	2240      	movs	r2, #64	; 0x40
 8000318:	2100      	movs	r1, #0
 800031a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	0018      	movs	r0, r3
 8000320:	f002 fa8c 	bl	800283c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000328:	2210      	movs	r2, #16
 800032a:	4013      	ands	r3, r2
 800032c:	d000      	beq.n	8000330 <HAL_ADC_Init+0x48>
 800032e:	e102      	b.n	8000536 <HAL_ADC_Init+0x24e>
 8000330:	230f      	movs	r3, #15
 8000332:	18fb      	adds	r3, r7, r3
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d000      	beq.n	800033c <HAL_ADC_Init+0x54>
 800033a:	e0fc      	b.n	8000536 <HAL_ADC_Init+0x24e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	689b      	ldr	r3, [r3, #8]
 8000342:	2204      	movs	r2, #4
 8000344:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000346:	d000      	beq.n	800034a <HAL_ADC_Init+0x62>
 8000348:	e0f5      	b.n	8000536 <HAL_ADC_Init+0x24e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800034e:	4a82      	ldr	r2, [pc, #520]	; (8000558 <HAL_ADC_Init+0x270>)
 8000350:	4013      	ands	r3, r2
 8000352:	2202      	movs	r2, #2
 8000354:	431a      	orrs	r2, r3
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	645a      	str	r2, [r3, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	2203      	movs	r2, #3
 8000362:	4013      	ands	r3, r2
 8000364:	2b01      	cmp	r3, #1
 8000366:	d112      	bne.n	800038e <HAL_ADC_Init+0xa6>
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2201      	movs	r2, #1
 8000370:	4013      	ands	r3, r2
 8000372:	2b01      	cmp	r3, #1
 8000374:	d009      	beq.n	800038a <HAL_ADC_Init+0xa2>
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	68da      	ldr	r2, [r3, #12]
 800037c:	2380      	movs	r3, #128	; 0x80
 800037e:	021b      	lsls	r3, r3, #8
 8000380:	401a      	ands	r2, r3
 8000382:	2380      	movs	r3, #128	; 0x80
 8000384:	021b      	lsls	r3, r3, #8
 8000386:	429a      	cmp	r2, r3
 8000388:	d101      	bne.n	800038e <HAL_ADC_Init+0xa6>
 800038a:	2301      	movs	r3, #1
 800038c:	e000      	b.n	8000390 <HAL_ADC_Init+0xa8>
 800038e:	2300      	movs	r3, #0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d116      	bne.n	80003c2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	68db      	ldr	r3, [r3, #12]
 800039a:	2218      	movs	r2, #24
 800039c:	4393      	bics	r3, r2
 800039e:	0019      	movs	r1, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	689a      	ldr	r2, [r3, #8]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	430a      	orrs	r2, r1
 80003aa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	691b      	ldr	r3, [r3, #16]
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	0899      	lsrs	r1, r3, #2
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	685a      	ldr	r2, [r3, #4]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	430a      	orrs	r2, r1
 80003c0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	68da      	ldr	r2, [r3, #12]
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4963      	ldr	r1, [pc, #396]	; (800055c <HAL_ADC_Init+0x274>)
 80003ce:	400a      	ands	r2, r1
 80003d0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	69db      	ldr	r3, [r3, #28]
 80003dc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003de:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	6a1b      	ldr	r3, [r3, #32]
 80003e4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80003e6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d002      	beq.n	80003f6 <HAL_ADC_Init+0x10e>
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	015b      	lsls	r3, r3, #5
 80003f4:	e000      	b.n	80003f8 <HAL_ADC_Init+0x110>
 80003f6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80003f8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                   |
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80003fe:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	691b      	ldr	r3, [r3, #16]
 8000404:	2b02      	cmp	r3, #2
 8000406:	d101      	bne.n	800040c <HAL_ADC_Init+0x124>
 8000408:	2304      	movs	r3, #4
 800040a:	e000      	b.n	800040e <HAL_ADC_Init+0x126>
 800040c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                   |
 800040e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000414:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000416:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000418:	68ba      	ldr	r2, [r7, #8]
 800041a:	4313      	orrs	r3, r2
 800041c:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000422:	2b01      	cmp	r3, #1
 8000424:	d115      	bne.n	8000452 <HAL_ADC_Init+0x16a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6a1b      	ldr	r3, [r3, #32]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d105      	bne.n	800043a <HAL_ADC_Init+0x152>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800042e:	68bb      	ldr	r3, [r7, #8]
 8000430:	2280      	movs	r2, #128	; 0x80
 8000432:	0252      	lsls	r2, r2, #9
 8000434:	4313      	orrs	r3, r2
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	e00b      	b.n	8000452 <HAL_ADC_Init+0x16a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800043e:	2220      	movs	r2, #32
 8000440:	431a      	orrs	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800044a:	2201      	movs	r2, #1
 800044c:	431a      	orrs	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000456:	23c2      	movs	r3, #194	; 0xc2
 8000458:	33ff      	adds	r3, #255	; 0xff
 800045a:	429a      	cmp	r2, r3
 800045c:	d007      	beq.n	800046e <HAL_ADC_Init+0x186>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                    hadc->Init.ExternalTrigConvEdge );
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000466:	4313      	orrs	r3, r2
 8000468:	68ba      	ldr	r2, [r7, #8]
 800046a:	4313      	orrs	r3, r2
 800046c:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	68d9      	ldr	r1, [r3, #12]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	68ba      	ldr	r2, [r7, #8]
 800047a:	430a      	orrs	r2, r1
 800047c:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000482:	2380      	movs	r3, #128	; 0x80
 8000484:	055b      	lsls	r3, r3, #21
 8000486:	429a      	cmp	r2, r3
 8000488:	d01b      	beq.n	80004c2 <HAL_ADC_Init+0x1da>
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800048e:	2b01      	cmp	r3, #1
 8000490:	d017      	beq.n	80004c2 <HAL_ADC_Init+0x1da>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000496:	2b02      	cmp	r3, #2
 8000498:	d013      	beq.n	80004c2 <HAL_ADC_Init+0x1da>
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800049e:	2b03      	cmp	r3, #3
 80004a0:	d00f      	beq.n	80004c2 <HAL_ADC_Init+0x1da>
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004a6:	2b04      	cmp	r3, #4
 80004a8:	d00b      	beq.n	80004c2 <HAL_ADC_Init+0x1da>
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004ae:	2b05      	cmp	r3, #5
 80004b0:	d007      	beq.n	80004c2 <HAL_ADC_Init+0x1da>
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004b6:	2b06      	cmp	r3, #6
 80004b8:	d003      	beq.n	80004c2 <HAL_ADC_Init+0x1da>
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004be:	2b07      	cmp	r3, #7
 80004c0:	d112      	bne.n	80004e8 <HAL_ADC_Init+0x200>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	695a      	ldr	r2, [r3, #20]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2107      	movs	r1, #7
 80004ce:	438a      	bics	r2, r1
 80004d0:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	6959      	ldr	r1, [r3, #20]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004dc:	2207      	movs	r2, #7
 80004de:	401a      	ands	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	430a      	orrs	r2, r1
 80004e6:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	68db      	ldr	r3, [r3, #12]
 80004ee:	4a1c      	ldr	r2, [pc, #112]	; (8000560 <HAL_ADC_Init+0x278>)
 80004f0:	4013      	ands	r3, r2
 80004f2:	68ba      	ldr	r2, [r7, #8]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d10b      	bne.n	8000510 <HAL_ADC_Init+0x228>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2200      	movs	r2, #0
 80004fc:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000502:	2203      	movs	r2, #3
 8000504:	4393      	bics	r3, r2
 8000506:	2201      	movs	r2, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	645a      	str	r2, [r3, #68]	; 0x44
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800050e:	e01c      	b.n	800054a <HAL_ADC_Init+0x262>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000514:	2212      	movs	r2, #18
 8000516:	4393      	bics	r3, r2
 8000518:	2210      	movs	r2, #16
 800051a:	431a      	orrs	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000524:	2201      	movs	r2, #1
 8000526:	431a      	orrs	r2, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 800052c:	230f      	movs	r3, #15
 800052e:	18fb      	adds	r3, r7, r3
 8000530:	2201      	movs	r2, #1
 8000532:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000534:	e009      	b.n	800054a <HAL_ADC_Init+0x262>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800053a:	2210      	movs	r2, #16
 800053c:	431a      	orrs	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	645a      	str	r2, [r3, #68]	; 0x44
        
    tmp_hal_status = HAL_ERROR;
 8000542:	230f      	movs	r3, #15
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	2201      	movs	r2, #1
 8000548:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800054a:	230f      	movs	r3, #15
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	781b      	ldrb	r3, [r3, #0]
}
 8000550:	0018      	movs	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	b004      	add	sp, #16
 8000556:	bd80      	pop	{r7, pc}
 8000558:	fffffefd 	.word	0xfffffefd
 800055c:	fffe0219 	.word	0xfffe0219
 8000560:	833fffe7 	.word	0x833fffe7

08000564 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800056c:	230f      	movs	r3, #15
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	2204      	movs	r2, #4
 800057c:	4013      	ands	r3, r2
 800057e:	d138      	bne.n	80005f2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2240      	movs	r2, #64	; 0x40
 8000584:	5c9b      	ldrb	r3, [r3, r2]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d101      	bne.n	800058e <HAL_ADC_Start+0x2a>
 800058a:	2302      	movs	r3, #2
 800058c:	e038      	b.n	8000600 <HAL_ADC_Start+0x9c>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2240      	movs	r2, #64	; 0x40
 8000592:	2101      	movs	r1, #1
 8000594:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d007      	beq.n	80005ae <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800059e:	230f      	movs	r3, #15
 80005a0:	18fc      	adds	r4, r7, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 f9db 	bl	8000960 <ADC_Enable>
 80005aa:	0003      	movs	r3, r0
 80005ac:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80005ae:	230f      	movs	r3, #15
 80005b0:	18fb      	adds	r3, r7, r3
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d120      	bne.n	80005fa <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005bc:	4a12      	ldr	r2, [pc, #72]	; (8000608 <HAL_ADC_Start+0xa4>)
 80005be:	4013      	ands	r3, r2
 80005c0:	2280      	movs	r2, #128	; 0x80
 80005c2:	0052      	lsls	r2, r2, #1
 80005c4:	431a      	orrs	r2, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2200      	movs	r2, #0
 80005ce:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2240      	movs	r2, #64	; 0x40
 80005d4:	2100      	movs	r1, #0
 80005d6:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	221c      	movs	r2, #28
 80005de:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	689a      	ldr	r2, [r3, #8]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2104      	movs	r1, #4
 80005ec:	430a      	orrs	r2, r1
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	e003      	b.n	80005fa <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80005f2:	230f      	movs	r3, #15
 80005f4:	18fb      	adds	r3, r7, r3
 80005f6:	2202      	movs	r2, #2
 80005f8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80005fa:	230f      	movs	r3, #15
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	781b      	ldrb	r3, [r3, #0]
}
 8000600:	0018      	movs	r0, r3
 8000602:	46bd      	mov	sp, r7
 8000604:	b005      	add	sp, #20
 8000606:	bd90      	pop	{r4, r7, pc}
 8000608:	fffff0fe 	.word	0xfffff0fe

0800060c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	2b08      	cmp	r3, #8
 800061c:	d102      	bne.n	8000624 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800061e:	2308      	movs	r3, #8
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	e013      	b.n	800064c <HAL_ADC_PollForConversion+0x40>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	68db      	ldr	r3, [r3, #12]
 800062a:	2201      	movs	r2, #1
 800062c:	4013      	ands	r3, r2
 800062e:	d00b      	beq.n	8000648 <HAL_ADC_PollForConversion+0x3c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000634:	2220      	movs	r2, #32
 8000636:	431a      	orrs	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2240      	movs	r2, #64	; 0x40
 8000640:	2100      	movs	r1, #0
 8000642:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000644:	2301      	movs	r3, #1
 8000646:	e06b      	b.n	8000720 <HAL_ADC_PollForConversion+0x114>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000648:	230c      	movs	r3, #12
 800064a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800064c:	f7ff fe24 	bl	8000298 <HAL_GetTick>
 8000650:	0003      	movs	r3, r0
 8000652:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000654:	e019      	b.n	800068a <HAL_ADC_PollForConversion+0x7e>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	3301      	adds	r3, #1
 800065a:	d016      	beq.n	800068a <HAL_ADC_PollForConversion+0x7e>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d007      	beq.n	8000672 <HAL_ADC_PollForConversion+0x66>
 8000662:	f7ff fe19 	bl	8000298 <HAL_GetTick>
 8000666:	0002      	movs	r2, r0
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	1ad3      	subs	r3, r2, r3
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	429a      	cmp	r2, r3
 8000670:	d20b      	bcs.n	800068a <HAL_ADC_PollForConversion+0x7e>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000676:	2204      	movs	r2, #4
 8000678:	431a      	orrs	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2240      	movs	r2, #64	; 0x40
 8000682:	2100      	movs	r1, #0
 8000684:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8000686:	2303      	movs	r3, #3
 8000688:	e04a      	b.n	8000720 <HAL_ADC_PollForConversion+0x114>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	4013      	ands	r3, r2
 8000694:	d0df      	beq.n	8000656 <HAL_ADC_PollForConversion+0x4a>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	0092      	lsls	r2, r2, #2
 800069e:	431a      	orrs	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	68da      	ldr	r2, [r3, #12]
 80006aa:	23c0      	movs	r3, #192	; 0xc0
 80006ac:	011b      	lsls	r3, r3, #4
 80006ae:	4013      	ands	r3, r2
 80006b0:	d12d      	bne.n	800070e <HAL_ADC_PollForConversion+0x102>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6a1b      	ldr	r3, [r3, #32]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d129      	bne.n	800070e <HAL_ADC_PollForConversion+0x102>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2208      	movs	r2, #8
 80006c2:	4013      	ands	r3, r2
 80006c4:	2b08      	cmp	r3, #8
 80006c6:	d122      	bne.n	800070e <HAL_ADC_PollForConversion+0x102>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	689b      	ldr	r3, [r3, #8]
 80006ce:	2204      	movs	r2, #4
 80006d0:	4013      	ands	r3, r2
 80006d2:	d110      	bne.n	80006f6 <HAL_ADC_PollForConversion+0xea>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	685a      	ldr	r2, [r3, #4]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	210c      	movs	r1, #12
 80006e0:	438a      	bics	r2, r1
 80006e2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e8:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <HAL_ADC_PollForConversion+0x11c>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	2201      	movs	r2, #1
 80006ee:	431a      	orrs	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	645a      	str	r2, [r3, #68]	; 0x44
 80006f4:	e00b      	b.n	800070e <HAL_ADC_PollForConversion+0x102>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fa:	2220      	movs	r2, #32
 80006fc:	431a      	orrs	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000706:	2201      	movs	r2, #1
 8000708:	431a      	orrs	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	649a      	str	r2, [r3, #72]	; 0x48
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d103      	bne.n	800071e <HAL_ADC_PollForConversion+0x112>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	220c      	movs	r2, #12
 800071c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800071e:	2300      	movs	r3, #0
}
 8000720:	0018      	movs	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	b004      	add	sp, #16
 8000726:	bd80      	pop	{r7, pc}
 8000728:	fffffefe 	.word	0xfffffefe

0800072c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800073a:	0018      	movs	r0, r3
 800073c:	46bd      	mov	sp, r7
 800073e:	b002      	add	sp, #8
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800074e:	230f      	movs	r3, #15
 8000750:	18fb      	adds	r3, r7, r3
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800075e:	2380      	movs	r3, #128	; 0x80
 8000760:	055b      	lsls	r3, r3, #21
 8000762:	429a      	cmp	r2, r3
 8000764:	d011      	beq.n	800078a <HAL_ADC_ConfigChannel+0x46>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800076a:	2b01      	cmp	r3, #1
 800076c:	d00d      	beq.n	800078a <HAL_ADC_ConfigChannel+0x46>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000772:	2b02      	cmp	r3, #2
 8000774:	d009      	beq.n	800078a <HAL_ADC_ConfigChannel+0x46>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800077a:	2b03      	cmp	r3, #3
 800077c:	d005      	beq.n	800078a <HAL_ADC_ConfigChannel+0x46>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000782:	2b04      	cmp	r3, #4
 8000784:	d001      	beq.n	800078a <HAL_ADC_ConfigChannel+0x46>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2240      	movs	r2, #64	; 0x40
 800078e:	5c9b      	ldrb	r3, [r3, r2]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d101      	bne.n	8000798 <HAL_ADC_ConfigChannel+0x54>
 8000794:	2302      	movs	r3, #2
 8000796:	e0d0      	b.n	800093a <HAL_ADC_ConfigChannel+0x1f6>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2240      	movs	r2, #64	; 0x40
 800079c:	2101      	movs	r1, #1
 800079e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	2204      	movs	r2, #4
 80007a8:	4013      	ands	r3, r2
 80007aa:	d000      	beq.n	80007ae <HAL_ADC_ConfigChannel+0x6a>
 80007ac:	e0b4      	b.n	8000918 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	4a64      	ldr	r2, [pc, #400]	; (8000944 <HAL_ADC_ConfigChannel+0x200>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d100      	bne.n	80007ba <HAL_ADC_ConfigChannel+0x76>
 80007b8:	e082      	b.n	80008c0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2201      	movs	r2, #1
 80007c6:	409a      	lsls	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	430a      	orrs	r2, r1
 80007ce:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	055b      	lsls	r3, r3, #21
 80007d8:	429a      	cmp	r2, r3
 80007da:	d037      	beq.n	800084c <HAL_ADC_ConfigChannel+0x108>
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d033      	beq.n	800084c <HAL_ADC_ConfigChannel+0x108>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	d02f      	beq.n	800084c <HAL_ADC_ConfigChannel+0x108>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007f0:	2b03      	cmp	r3, #3
 80007f2:	d02b      	beq.n	800084c <HAL_ADC_ConfigChannel+0x108>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007f8:	2b04      	cmp	r3, #4
 80007fa:	d027      	beq.n	800084c <HAL_ADC_ConfigChannel+0x108>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000800:	2b05      	cmp	r3, #5
 8000802:	d023      	beq.n	800084c <HAL_ADC_ConfigChannel+0x108>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000808:	2b06      	cmp	r3, #6
 800080a:	d01f      	beq.n	800084c <HAL_ADC_ConfigChannel+0x108>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000810:	2b07      	cmp	r3, #7
 8000812:	d01b      	beq.n	800084c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	689a      	ldr	r2, [r3, #8]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	2107      	movs	r1, #7
 8000820:	400b      	ands	r3, r1
 8000822:	429a      	cmp	r2, r3
 8000824:	d012      	beq.n	800084c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	695a      	ldr	r2, [r3, #20]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2107      	movs	r1, #7
 8000832:	438a      	bics	r2, r1
 8000834:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	6959      	ldr	r1, [r3, #20]
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	2207      	movs	r2, #7
 8000842:	401a      	ands	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	430a      	orrs	r2, r1
 800084a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b10      	cmp	r3, #16
 8000852:	d007      	beq.n	8000864 <HAL_ADC_ConfigChannel+0x120>
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b11      	cmp	r3, #17
 800085a:	d003      	beq.n	8000864 <HAL_ADC_ConfigChannel+0x120>
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b12      	cmp	r3, #18
 8000862:	d163      	bne.n	800092c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000864:	4b38      	ldr	r3, [pc, #224]	; (8000948 <HAL_ADC_ConfigChannel+0x204>)
 8000866:	6819      	ldr	r1, [r3, #0]
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b10      	cmp	r3, #16
 800086e:	d009      	beq.n	8000884 <HAL_ADC_ConfigChannel+0x140>
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b11      	cmp	r3, #17
 8000876:	d102      	bne.n	800087e <HAL_ADC_ConfigChannel+0x13a>
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	03db      	lsls	r3, r3, #15
 800087c:	e004      	b.n	8000888 <HAL_ADC_ConfigChannel+0x144>
 800087e:	2380      	movs	r3, #128	; 0x80
 8000880:	045b      	lsls	r3, r3, #17
 8000882:	e001      	b.n	8000888 <HAL_ADC_ConfigChannel+0x144>
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	041b      	lsls	r3, r3, #16
 8000888:	4a2f      	ldr	r2, [pc, #188]	; (8000948 <HAL_ADC_ConfigChannel+0x204>)
 800088a:	430b      	orrs	r3, r1
 800088c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b10      	cmp	r3, #16
 8000894:	d14a      	bne.n	800092c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000896:	4b2d      	ldr	r3, [pc, #180]	; (800094c <HAL_ADC_ConfigChannel+0x208>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	492d      	ldr	r1, [pc, #180]	; (8000950 <HAL_ADC_ConfigChannel+0x20c>)
 800089c:	0018      	movs	r0, r3
 800089e:	f7ff fc33 	bl	8000108 <__udivsi3>
 80008a2:	0003      	movs	r3, r0
 80008a4:	001a      	movs	r2, r3
 80008a6:	0013      	movs	r3, r2
 80008a8:	009b      	lsls	r3, r3, #2
 80008aa:	189b      	adds	r3, r3, r2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80008b0:	e002      	b.n	80008b8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	3b01      	subs	r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1f9      	bne.n	80008b2 <HAL_ADC_ConfigChannel+0x16e>
 80008be:	e035      	b.n	800092c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2101      	movs	r1, #1
 80008cc:	4099      	lsls	r1, r3
 80008ce:	000b      	movs	r3, r1
 80008d0:	43d9      	mvns	r1, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	400a      	ands	r2, r1
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b10      	cmp	r3, #16
 80008e0:	d007      	beq.n	80008f2 <HAL_ADC_ConfigChannel+0x1ae>
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b11      	cmp	r3, #17
 80008e8:	d003      	beq.n	80008f2 <HAL_ADC_ConfigChannel+0x1ae>
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b12      	cmp	r3, #18
 80008f0:	d11c      	bne.n	800092c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <HAL_ADC_ConfigChannel+0x204>)
 80008f4:	6819      	ldr	r1, [r3, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b10      	cmp	r3, #16
 80008fc:	d007      	beq.n	800090e <HAL_ADC_ConfigChannel+0x1ca>
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2b11      	cmp	r3, #17
 8000904:	d101      	bne.n	800090a <HAL_ADC_ConfigChannel+0x1c6>
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <HAL_ADC_ConfigChannel+0x210>)
 8000908:	e002      	b.n	8000910 <HAL_ADC_ConfigChannel+0x1cc>
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <HAL_ADC_ConfigChannel+0x214>)
 800090c:	e000      	b.n	8000910 <HAL_ADC_ConfigChannel+0x1cc>
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <HAL_ADC_ConfigChannel+0x218>)
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <HAL_ADC_ConfigChannel+0x204>)
 8000912:	400b      	ands	r3, r1
 8000914:	6013      	str	r3, [r2, #0]
 8000916:	e009      	b.n	800092c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091c:	2220      	movs	r2, #32
 800091e:	431a      	orrs	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8000924:	230f      	movs	r3, #15
 8000926:	18fb      	adds	r3, r7, r3
 8000928:	2201      	movs	r2, #1
 800092a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2240      	movs	r2, #64	; 0x40
 8000930:	2100      	movs	r1, #0
 8000932:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000934:	230f      	movs	r3, #15
 8000936:	18fb      	adds	r3, r7, r3
 8000938:	781b      	ldrb	r3, [r3, #0]
}
 800093a:	0018      	movs	r0, r3
 800093c:	46bd      	mov	sp, r7
 800093e:	b004      	add	sp, #16
 8000940:	bd80      	pop	{r7, pc}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	00001001 	.word	0x00001001
 8000948:	40012708 	.word	0x40012708
 800094c:	20000000 	.word	0x20000000
 8000950:	000f4240 	.word	0x000f4240
 8000954:	ffbfffff 	.word	0xffbfffff
 8000958:	feffffff 	.word	0xfeffffff
 800095c:	ff7fffff 	.word	0xff7fffff

08000960 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	2203      	movs	r2, #3
 8000978:	4013      	ands	r3, r2
 800097a:	2b01      	cmp	r3, #1
 800097c:	d112      	bne.n	80009a4 <ADC_Enable+0x44>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2201      	movs	r2, #1
 8000986:	4013      	ands	r3, r2
 8000988:	2b01      	cmp	r3, #1
 800098a:	d009      	beq.n	80009a0 <ADC_Enable+0x40>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	68da      	ldr	r2, [r3, #12]
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	401a      	ands	r2, r3
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	021b      	lsls	r3, r3, #8
 800099c:	429a      	cmp	r2, r3
 800099e:	d101      	bne.n	80009a4 <ADC_Enable+0x44>
 80009a0:	2301      	movs	r3, #1
 80009a2:	e000      	b.n	80009a6 <ADC_Enable+0x46>
 80009a4:	2300      	movs	r3, #0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d14b      	bne.n	8000a42 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	4a26      	ldr	r2, [pc, #152]	; (8000a4c <ADC_Enable+0xec>)
 80009b2:	4013      	ands	r3, r2
 80009b4:	d00d      	beq.n	80009d2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	2210      	movs	r2, #16
 80009bc:	431a      	orrs	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	645a      	str	r2, [r3, #68]	; 0x44
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009c6:	2201      	movs	r2, #1
 80009c8:	431a      	orrs	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e038      	b.n	8000a44 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	689a      	ldr	r2, [r3, #8]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2101      	movs	r1, #1
 80009de:	430a      	orrs	r2, r1
 80009e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80009e2:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <ADC_Enable+0xf0>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	491b      	ldr	r1, [pc, #108]	; (8000a54 <ADC_Enable+0xf4>)
 80009e8:	0018      	movs	r0, r3
 80009ea:	f7ff fb8d 	bl	8000108 <__udivsi3>
 80009ee:	0003      	movs	r3, r0
 80009f0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80009f2:	e002      	b.n	80009fa <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1f9      	bne.n	80009f4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000a00:	f7ff fc4a 	bl	8000298 <HAL_GetTick>
 8000a04:	0003      	movs	r3, r0
 8000a06:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000a08:	e014      	b.n	8000a34 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000a0a:	f7ff fc45 	bl	8000298 <HAL_GetTick>
 8000a0e:	0002      	movs	r2, r0
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d90d      	bls.n	8000a34 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1c:	2210      	movs	r2, #16
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a28:	2201      	movs	r2, #1
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	e007      	b.n	8000a44 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d1e3      	bne.n	8000a0a <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b004      	add	sp, #16
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	80000017 	.word	0x80000017
 8000a50:	20000000 	.word	0x20000000
 8000a54:	000f4240 	.word	0x000f4240

08000a58 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a60:	2317      	movs	r3, #23
 8000a62:	18fb      	adds	r3, r7, r3
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2240      	movs	r2, #64	; 0x40
 8000a74:	5c9b      	ldrb	r3, [r3, r2]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d101      	bne.n	8000a7e <HAL_ADCEx_Calibration_Start+0x26>
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	e080      	b.n	8000b80 <HAL_ADCEx_Calibration_Start+0x128>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2240      	movs	r2, #64	; 0x40
 8000a82:	2101      	movs	r1, #1
 8000a84:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	2203      	movs	r2, #3
 8000a8e:	4013      	ands	r3, r2
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d112      	bne.n	8000aba <HAL_ADCEx_Calibration_Start+0x62>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d009      	beq.n	8000ab6 <HAL_ADCEx_Calibration_Start+0x5e>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	68da      	ldr	r2, [r3, #12]
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	021b      	lsls	r3, r3, #8
 8000aac:	401a      	ands	r2, r3
 8000aae:	2380      	movs	r3, #128	; 0x80
 8000ab0:	021b      	lsls	r3, r3, #8
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d101      	bne.n	8000aba <HAL_ADCEx_Calibration_Start+0x62>
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e000      	b.n	8000abc <HAL_ADCEx_Calibration_Start+0x64>
 8000aba:	2300      	movs	r3, #0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d14e      	bne.n	8000b5e <HAL_ADCEx_Calibration_Start+0x106>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac4:	4a30      	ldr	r2, [pc, #192]	; (8000b88 <HAL_ADCEx_Calibration_Start+0x130>)
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	2202      	movs	r2, #2
 8000aca:	431a      	orrs	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	645a      	str	r2, [r3, #68]	; 0x44
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	68da      	ldr	r2, [r3, #12]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2103      	movs	r1, #3
 8000ae8:	438a      	bics	r2, r1
 8000aea:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	689a      	ldr	r2, [r3, #8]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2180      	movs	r1, #128	; 0x80
 8000af8:	0609      	lsls	r1, r1, #24
 8000afa:	430a      	orrs	r2, r1
 8000afc:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8000afe:	f7ff fbcb 	bl	8000298 <HAL_GetTick>
 8000b02:	0003      	movs	r3, r0
 8000b04:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000b06:	e014      	b.n	8000b32 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000b08:	f7ff fbc6 	bl	8000298 <HAL_GetTick>
 8000b0c:	0002      	movs	r2, r0
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d90d      	bls.n	8000b32 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	2212      	movs	r2, #18
 8000b1c:	4393      	bics	r3, r2
 8000b1e:	2210      	movs	r2, #16
 8000b20:	431a      	orrs	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2240      	movs	r2, #64	; 0x40
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e026      	b.n	8000b80 <HAL_ADCEx_Calibration_Start+0x128>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	dbe5      	blt.n	8000b08 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68d9      	ldr	r1, [r3, #12]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b50:	2203      	movs	r2, #3
 8000b52:	4393      	bics	r3, r2
 8000b54:	2201      	movs	r2, #1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	645a      	str	r2, [r3, #68]	; 0x44
 8000b5c:	e009      	b.n	8000b72 <HAL_ADCEx_Calibration_Start+0x11a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	2220      	movs	r2, #32
 8000b64:	431a      	orrs	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8000b6a:	2317      	movs	r3, #23
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2240      	movs	r2, #64	; 0x40
 8000b76:	2100      	movs	r1, #0
 8000b78:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000b7a:	2317      	movs	r3, #23
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	781b      	ldrb	r3, [r3, #0]
}
 8000b80:	0018      	movs	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b006      	add	sp, #24
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	fffffefd 	.word	0xfffffefd

08000b8c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	0002      	movs	r2, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000ba0:	d932      	bls.n	8000c08 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba2:	4a2f      	ldr	r2, [pc, #188]	; (8000c60 <NVIC_SetPriority+0xd4>)
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	0019      	movs	r1, r3
 8000baa:	230f      	movs	r3, #15
 8000bac:	400b      	ands	r3, r1
 8000bae:	3b08      	subs	r3, #8
 8000bb0:	089b      	lsrs	r3, r3, #2
 8000bb2:	3306      	adds	r3, #6
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	18d3      	adds	r3, r2, r3
 8000bb8:	3304      	adds	r3, #4
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	1dfa      	adds	r2, r7, #7
 8000bbe:	7812      	ldrb	r2, [r2, #0]
 8000bc0:	0011      	movs	r1, r2
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	400a      	ands	r2, r1
 8000bc6:	00d2      	lsls	r2, r2, #3
 8000bc8:	21ff      	movs	r1, #255	; 0xff
 8000bca:	4091      	lsls	r1, r2
 8000bcc:	000a      	movs	r2, r1
 8000bce:	43d2      	mvns	r2, r2
 8000bd0:	401a      	ands	r2, r3
 8000bd2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	019b      	lsls	r3, r3, #6
 8000bd8:	22ff      	movs	r2, #255	; 0xff
 8000bda:	401a      	ands	r2, r3
 8000bdc:	1dfb      	adds	r3, r7, #7
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	0018      	movs	r0, r3
 8000be2:	2303      	movs	r3, #3
 8000be4:	4003      	ands	r3, r0
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bea:	481d      	ldr	r0, [pc, #116]	; (8000c60 <NVIC_SetPriority+0xd4>)
 8000bec:	1dfb      	adds	r3, r7, #7
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	001c      	movs	r4, r3
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	4023      	ands	r3, r4
 8000bf6:	3b08      	subs	r3, #8
 8000bf8:	089b      	lsrs	r3, r3, #2
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	3306      	adds	r3, #6
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	18c3      	adds	r3, r0, r3
 8000c02:	3304      	adds	r3, #4
 8000c04:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c06:	e027      	b.n	8000c58 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c08:	4a16      	ldr	r2, [pc, #88]	; (8000c64 <NVIC_SetPriority+0xd8>)
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b25b      	sxtb	r3, r3
 8000c10:	089b      	lsrs	r3, r3, #2
 8000c12:	33c0      	adds	r3, #192	; 0xc0
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	589b      	ldr	r3, [r3, r2]
 8000c18:	1dfa      	adds	r2, r7, #7
 8000c1a:	7812      	ldrb	r2, [r2, #0]
 8000c1c:	0011      	movs	r1, r2
 8000c1e:	2203      	movs	r2, #3
 8000c20:	400a      	ands	r2, r1
 8000c22:	00d2      	lsls	r2, r2, #3
 8000c24:	21ff      	movs	r1, #255	; 0xff
 8000c26:	4091      	lsls	r1, r2
 8000c28:	000a      	movs	r2, r1
 8000c2a:	43d2      	mvns	r2, r2
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	019b      	lsls	r3, r3, #6
 8000c34:	22ff      	movs	r2, #255	; 0xff
 8000c36:	401a      	ands	r2, r3
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	2303      	movs	r3, #3
 8000c40:	4003      	ands	r3, r0
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c46:	4807      	ldr	r0, [pc, #28]	; (8000c64 <NVIC_SetPriority+0xd8>)
 8000c48:	1dfb      	adds	r3, r7, #7
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	089b      	lsrs	r3, r3, #2
 8000c50:	430a      	orrs	r2, r1
 8000c52:	33c0      	adds	r3, #192	; 0xc0
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	501a      	str	r2, [r3, r0]
}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b003      	add	sp, #12
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	e000ed00 	.word	0xe000ed00
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	4a0c      	ldr	r2, [pc, #48]	; (8000ca8 <SysTick_Config+0x40>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d901      	bls.n	8000c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e010      	b.n	8000ca0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <SysTick_Config+0x44>)
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	3a01      	subs	r2, #1
 8000c84:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c86:	2301      	movs	r3, #1
 8000c88:	425b      	negs	r3, r3
 8000c8a:	2103      	movs	r1, #3
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f7ff ff7d 	bl	8000b8c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <SysTick_Config+0x44>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <SysTick_Config+0x44>)
 8000c9a:	2207      	movs	r2, #7
 8000c9c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b002      	add	sp, #8
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	00ffffff 	.word	0x00ffffff
 8000cac:	e000e010 	.word	0xe000e010

08000cb0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	210f      	movs	r1, #15
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	1c02      	adds	r2, r0, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	0011      	movs	r1, r2
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff ff5d 	bl	8000b8c <NVIC_SetPriority>
}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b004      	add	sp, #16
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff ffbf 	bl	8000c68 <SysTick_Config>
 8000cea:	0003      	movs	r3, r0
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b002      	add	sp, #8
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d0a:	e14f      	b.n	8000fac <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2101      	movs	r1, #1
 8000d12:	697a      	ldr	r2, [r7, #20]
 8000d14:	4091      	lsls	r1, r2
 8000d16:	000a      	movs	r2, r1
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d100      	bne.n	8000d24 <HAL_GPIO_Init+0x30>
 8000d22:	e140      	b.n	8000fa6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d003      	beq.n	8000d34 <HAL_GPIO_Init+0x40>
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	2b12      	cmp	r3, #18
 8000d32:	d123      	bne.n	8000d7c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	08da      	lsrs	r2, r3, #3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3208      	adds	r2, #8
 8000d3c:	0092      	lsls	r2, r2, #2
 8000d3e:	58d3      	ldr	r3, [r2, r3]
 8000d40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	2207      	movs	r2, #7
 8000d46:	4013      	ands	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	220f      	movs	r2, #15
 8000d4c:	409a      	lsls	r2, r3
 8000d4e:	0013      	movs	r3, r2
 8000d50:	43da      	mvns	r2, r3
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	691a      	ldr	r2, [r3, #16]
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	2107      	movs	r1, #7
 8000d60:	400b      	ands	r3, r1
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	409a      	lsls	r2, r3
 8000d66:	0013      	movs	r3, r2
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	08da      	lsrs	r2, r3, #3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3208      	adds	r2, #8
 8000d76:	0092      	lsls	r2, r2, #2
 8000d78:	6939      	ldr	r1, [r7, #16]
 8000d7a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2203      	movs	r2, #3
 8000d88:	409a      	lsls	r2, r3
 8000d8a:	0013      	movs	r3, r2
 8000d8c:	43da      	mvns	r2, r3
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2203      	movs	r2, #3
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	409a      	lsls	r2, r3
 8000da2:	0013      	movs	r3, r2
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d00b      	beq.n	8000dd0 <HAL_GPIO_Init+0xdc>
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d007      	beq.n	8000dd0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc4:	2b11      	cmp	r3, #17
 8000dc6:	d003      	beq.n	8000dd0 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b12      	cmp	r3, #18
 8000dce:	d130      	bne.n	8000e32 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	409a      	lsls	r2, r3
 8000dde:	0013      	movs	r3, r2
 8000de0:	43da      	mvns	r2, r3
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	409a      	lsls	r2, r3
 8000df2:	0013      	movs	r3, r2
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000e06:	2201      	movs	r2, #1
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	0013      	movs	r3, r2
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	091b      	lsrs	r3, r3, #4
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	401a      	ands	r2, r3
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	409a      	lsls	r2, r3
 8000e24:	0013      	movs	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	0013      	movs	r3, r2
 8000e42:	43da      	mvns	r2, r3
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	689a      	ldr	r2, [r3, #8]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	055b      	lsls	r3, r3, #21
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d100      	bne.n	8000e70 <HAL_GPIO_Init+0x17c>
 8000e6e:	e09a      	b.n	8000fa6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e70:	4b54      	ldr	r3, [pc, #336]	; (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000e72:	699a      	ldr	r2, [r3, #24]
 8000e74:	4b53      	ldr	r3, [pc, #332]	; (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	619a      	str	r2, [r3, #24]
 8000e7c:	4b51      	ldr	r3, [pc, #324]	; (8000fc4 <HAL_GPIO_Init+0x2d0>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	2201      	movs	r2, #1
 8000e82:	4013      	ands	r3, r2
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000e88:	4a4f      	ldr	r2, [pc, #316]	; (8000fc8 <HAL_GPIO_Init+0x2d4>)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	589b      	ldr	r3, [r3, r2]
 8000e94:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2203      	movs	r2, #3
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	409a      	lsls	r2, r3
 8000ea2:	0013      	movs	r3, r2
 8000ea4:	43da      	mvns	r2, r3
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	2390      	movs	r3, #144	; 0x90
 8000eb0:	05db      	lsls	r3, r3, #23
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d013      	beq.n	8000ede <HAL_GPIO_Init+0x1ea>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a44      	ldr	r2, [pc, #272]	; (8000fcc <HAL_GPIO_Init+0x2d8>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d00d      	beq.n	8000eda <HAL_GPIO_Init+0x1e6>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a43      	ldr	r2, [pc, #268]	; (8000fd0 <HAL_GPIO_Init+0x2dc>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d007      	beq.n	8000ed6 <HAL_GPIO_Init+0x1e2>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a42      	ldr	r2, [pc, #264]	; (8000fd4 <HAL_GPIO_Init+0x2e0>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d101      	bne.n	8000ed2 <HAL_GPIO_Init+0x1de>
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e006      	b.n	8000ee0 <HAL_GPIO_Init+0x1ec>
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	e004      	b.n	8000ee0 <HAL_GPIO_Init+0x1ec>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e002      	b.n	8000ee0 <HAL_GPIO_Init+0x1ec>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <HAL_GPIO_Init+0x1ec>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	2103      	movs	r1, #3
 8000ee4:	400a      	ands	r2, r1
 8000ee6:	0092      	lsls	r2, r2, #2
 8000ee8:	4093      	lsls	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ef0:	4935      	ldr	r1, [pc, #212]	; (8000fc8 <HAL_GPIO_Init+0x2d4>)
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000efe:	4b36      	ldr	r3, [pc, #216]	; (8000fd8 <HAL_GPIO_Init+0x2e4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	43da      	mvns	r2, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685a      	ldr	r2, [r3, #4]
 8000f12:	2380      	movs	r3, #128	; 0x80
 8000f14:	025b      	lsls	r3, r3, #9
 8000f16:	4013      	ands	r3, r2
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f22:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <HAL_GPIO_Init+0x2e4>)
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f28:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <HAL_GPIO_Init+0x2e4>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	43da      	mvns	r2, r3
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	029b      	lsls	r3, r3, #10
 8000f40:	4013      	ands	r3, r2
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f4c:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <HAL_GPIO_Init+0x2e4>)
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HAL_GPIO_Init+0x2e4>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	035b      	lsls	r3, r3, #13
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_GPIO_Init+0x2e4>)
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_GPIO_Init+0x2e4>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43da      	mvns	r2, r3
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	039b      	lsls	r3, r3, #14
 8000f94:	4013      	ands	r3, r2
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_GPIO_Init+0x2e4>)
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	40da      	lsrs	r2, r3
 8000fb4:	1e13      	subs	r3, r2, #0
 8000fb6:	d000      	beq.n	8000fba <HAL_GPIO_Init+0x2c6>
 8000fb8:	e6a8      	b.n	8000d0c <HAL_GPIO_Init+0x18>
  } 
}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b006      	add	sp, #24
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010000 	.word	0x40010000
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	48000800 	.word	0x48000800
 8000fd4:	48000c00 	.word	0x48000c00
 8000fd8:	40010400 	.word	0x40010400

08000fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	0008      	movs	r0, r1
 8000fe6:	0011      	movs	r1, r2
 8000fe8:	1cbb      	adds	r3, r7, #2
 8000fea:	1c02      	adds	r2, r0, #0
 8000fec:	801a      	strh	r2, [r3, #0]
 8000fee:	1c7b      	adds	r3, r7, #1
 8000ff0:	1c0a      	adds	r2, r1, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff4:	1c7b      	adds	r3, r7, #1
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d004      	beq.n	8001006 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ffc:	1cbb      	adds	r3, r7, #2
 8000ffe:	881a      	ldrh	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001004:	e003      	b.n	800100e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001006:	1cbb      	adds	r3, r7, #2
 8001008:	881a      	ldrh	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	46bd      	mov	sp, r7
 8001012:	b002      	add	sp, #8
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2201      	movs	r2, #1
 800102a:	4013      	ands	r3, r2
 800102c:	d100      	bne.n	8001030 <HAL_RCC_OscConfig+0x18>
 800102e:	e08d      	b.n	800114c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001030:	4bc3      	ldr	r3, [pc, #780]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	220c      	movs	r2, #12
 8001036:	4013      	ands	r3, r2
 8001038:	2b04      	cmp	r3, #4
 800103a:	d00e      	beq.n	800105a <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800103c:	4bc0      	ldr	r3, [pc, #768]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	220c      	movs	r2, #12
 8001042:	4013      	ands	r3, r2
 8001044:	2b08      	cmp	r3, #8
 8001046:	d116      	bne.n	8001076 <HAL_RCC_OscConfig+0x5e>
 8001048:	4bbd      	ldr	r3, [pc, #756]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	025b      	lsls	r3, r3, #9
 8001050:	401a      	ands	r2, r3
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	025b      	lsls	r3, r3, #9
 8001056:	429a      	cmp	r2, r3
 8001058:	d10d      	bne.n	8001076 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105a:	4bb9      	ldr	r3, [pc, #740]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	2380      	movs	r3, #128	; 0x80
 8001060:	029b      	lsls	r3, r3, #10
 8001062:	4013      	ands	r3, r2
 8001064:	d100      	bne.n	8001068 <HAL_RCC_OscConfig+0x50>
 8001066:	e070      	b.n	800114a <HAL_RCC_OscConfig+0x132>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d000      	beq.n	8001072 <HAL_RCC_OscConfig+0x5a>
 8001070:	e06b      	b.n	800114a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e2b6      	b.n	80015e4 <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d107      	bne.n	800108e <HAL_RCC_OscConfig+0x76>
 800107e:	4bb0      	ldr	r3, [pc, #704]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4baf      	ldr	r3, [pc, #700]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 8001084:	2180      	movs	r1, #128	; 0x80
 8001086:	0249      	lsls	r1, r1, #9
 8001088:	430a      	orrs	r2, r1
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	e02f      	b.n	80010ee <HAL_RCC_OscConfig+0xd6>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d10c      	bne.n	80010b0 <HAL_RCC_OscConfig+0x98>
 8001096:	4baa      	ldr	r3, [pc, #680]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4ba9      	ldr	r3, [pc, #676]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 800109c:	49a9      	ldr	r1, [pc, #676]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 800109e:	400a      	ands	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	4ba7      	ldr	r3, [pc, #668]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	4ba6      	ldr	r3, [pc, #664]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 80010a8:	49a7      	ldr	r1, [pc, #668]	; (8001348 <HAL_RCC_OscConfig+0x330>)
 80010aa:	400a      	ands	r2, r1
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	e01e      	b.n	80010ee <HAL_RCC_OscConfig+0xd6>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b05      	cmp	r3, #5
 80010b6:	d10e      	bne.n	80010d6 <HAL_RCC_OscConfig+0xbe>
 80010b8:	4ba1      	ldr	r3, [pc, #644]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4ba0      	ldr	r3, [pc, #640]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 80010be:	2180      	movs	r1, #128	; 0x80
 80010c0:	02c9      	lsls	r1, r1, #11
 80010c2:	430a      	orrs	r2, r1
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	4b9e      	ldr	r3, [pc, #632]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	4b9d      	ldr	r3, [pc, #628]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	0249      	lsls	r1, r1, #9
 80010d0:	430a      	orrs	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	e00b      	b.n	80010ee <HAL_RCC_OscConfig+0xd6>
 80010d6:	4b9a      	ldr	r3, [pc, #616]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	4b99      	ldr	r3, [pc, #612]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 80010dc:	4999      	ldr	r1, [pc, #612]	; (8001344 <HAL_RCC_OscConfig+0x32c>)
 80010de:	400a      	ands	r2, r1
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	4b97      	ldr	r3, [pc, #604]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	4b96      	ldr	r3, [pc, #600]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 80010e8:	4997      	ldr	r1, [pc, #604]	; (8001348 <HAL_RCC_OscConfig+0x330>)
 80010ea:	400a      	ands	r2, r1
 80010ec:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d014      	beq.n	8001120 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f6:	f7ff f8cf 	bl	8000298 <HAL_GetTick>
 80010fa:	0003      	movs	r3, r0
 80010fc:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001100:	f7ff f8ca 	bl	8000298 <HAL_GetTick>
 8001104:	0002      	movs	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b64      	cmp	r3, #100	; 0x64
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e268      	b.n	80015e4 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001112:	4b8b      	ldr	r3, [pc, #556]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	029b      	lsls	r3, r3, #10
 800111a:	4013      	ands	r3, r2
 800111c:	d0f0      	beq.n	8001100 <HAL_RCC_OscConfig+0xe8>
 800111e:	e015      	b.n	800114c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001120:	f7ff f8ba 	bl	8000298 <HAL_GetTick>
 8001124:	0003      	movs	r3, r0
 8001126:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800112a:	f7ff f8b5 	bl	8000298 <HAL_GetTick>
 800112e:	0002      	movs	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b64      	cmp	r3, #100	; 0x64
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e253      	b.n	80015e4 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113c:	4b80      	ldr	r3, [pc, #512]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	029b      	lsls	r3, r3, #10
 8001144:	4013      	ands	r3, r2
 8001146:	d1f0      	bne.n	800112a <HAL_RCC_OscConfig+0x112>
 8001148:	e000      	b.n	800114c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2202      	movs	r2, #2
 8001152:	4013      	ands	r3, r2
 8001154:	d100      	bne.n	8001158 <HAL_RCC_OscConfig+0x140>
 8001156:	e069      	b.n	800122c <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001158:	4b79      	ldr	r3, [pc, #484]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	220c      	movs	r2, #12
 800115e:	4013      	ands	r3, r2
 8001160:	d00b      	beq.n	800117a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001162:	4b77      	ldr	r3, [pc, #476]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	220c      	movs	r2, #12
 8001168:	4013      	ands	r3, r2
 800116a:	2b08      	cmp	r3, #8
 800116c:	d11c      	bne.n	80011a8 <HAL_RCC_OscConfig+0x190>
 800116e:	4b74      	ldr	r3, [pc, #464]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	2380      	movs	r3, #128	; 0x80
 8001174:	025b      	lsls	r3, r3, #9
 8001176:	4013      	ands	r3, r2
 8001178:	d116      	bne.n	80011a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117a:	4b71      	ldr	r3, [pc, #452]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2202      	movs	r2, #2
 8001180:	4013      	ands	r3, r2
 8001182:	d005      	beq.n	8001190 <HAL_RCC_OscConfig+0x178>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d001      	beq.n	8001190 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e229      	b.n	80015e4 <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001190:	4b6b      	ldr	r3, [pc, #428]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	22f8      	movs	r2, #248	; 0xf8
 8001196:	4393      	bics	r3, r2
 8001198:	0019      	movs	r1, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	00da      	lsls	r2, r3, #3
 80011a0:	4b67      	ldr	r3, [pc, #412]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 80011a2:	430a      	orrs	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a6:	e041      	b.n	800122c <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d024      	beq.n	80011fa <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011b0:	4b63      	ldr	r3, [pc, #396]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b62      	ldr	r3, [pc, #392]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 80011b6:	2101      	movs	r1, #1
 80011b8:	430a      	orrs	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff f86c 	bl	8000298 <HAL_GetTick>
 80011c0:	0003      	movs	r3, r0
 80011c2:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c6:	f7ff f867 	bl	8000298 <HAL_GetTick>
 80011ca:	0002      	movs	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e205      	b.n	80015e4 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d8:	4b59      	ldr	r3, [pc, #356]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2202      	movs	r2, #2
 80011de:	4013      	ands	r3, r2
 80011e0:	d0f1      	beq.n	80011c6 <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e2:	4b57      	ldr	r3, [pc, #348]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	22f8      	movs	r2, #248	; 0xf8
 80011e8:	4393      	bics	r3, r2
 80011ea:	0019      	movs	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	00da      	lsls	r2, r3, #3
 80011f2:	4b53      	ldr	r3, [pc, #332]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 80011f4:	430a      	orrs	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	e018      	b.n	800122c <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011fa:	4b51      	ldr	r3, [pc, #324]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b50      	ldr	r3, [pc, #320]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 8001200:	2101      	movs	r1, #1
 8001202:	438a      	bics	r2, r1
 8001204:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001206:	f7ff f847 	bl	8000298 <HAL_GetTick>
 800120a:	0003      	movs	r3, r0
 800120c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001210:	f7ff f842 	bl	8000298 <HAL_GetTick>
 8001214:	0002      	movs	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e1e0      	b.n	80015e4 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001222:	4b47      	ldr	r3, [pc, #284]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2202      	movs	r2, #2
 8001228:	4013      	ands	r3, r2
 800122a:	d1f1      	bne.n	8001210 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2208      	movs	r2, #8
 8001232:	4013      	ands	r3, r2
 8001234:	d036      	beq.n	80012a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d019      	beq.n	8001272 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800123e:	4b40      	ldr	r3, [pc, #256]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 8001240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001242:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 8001244:	2101      	movs	r1, #1
 8001246:	430a      	orrs	r2, r1
 8001248:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124a:	f7ff f825 	bl	8000298 <HAL_GetTick>
 800124e:	0003      	movs	r3, r0
 8001250:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001254:	f7ff f820 	bl	8000298 <HAL_GetTick>
 8001258:	0002      	movs	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e1be      	b.n	80015e4 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001266:	4b36      	ldr	r3, [pc, #216]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	2202      	movs	r2, #2
 800126c:	4013      	ands	r3, r2
 800126e:	d0f1      	beq.n	8001254 <HAL_RCC_OscConfig+0x23c>
 8001270:	e018      	b.n	80012a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001272:	4b33      	ldr	r3, [pc, #204]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 8001274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001276:	4b32      	ldr	r3, [pc, #200]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 8001278:	2101      	movs	r1, #1
 800127a:	438a      	bics	r2, r1
 800127c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127e:	f7ff f80b 	bl	8000298 <HAL_GetTick>
 8001282:	0003      	movs	r3, r0
 8001284:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001288:	f7ff f806 	bl	8000298 <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e1a4      	b.n	80015e4 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129a:	4b29      	ldr	r3, [pc, #164]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	2202      	movs	r2, #2
 80012a0:	4013      	ands	r3, r2
 80012a2:	d1f1      	bne.n	8001288 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2204      	movs	r2, #4
 80012aa:	4013      	ands	r3, r2
 80012ac:	d100      	bne.n	80012b0 <HAL_RCC_OscConfig+0x298>
 80012ae:	e0b5      	b.n	800141c <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012b0:	2317      	movs	r3, #23
 80012b2:	18fb      	adds	r3, r7, r3
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 80012ba:	69da      	ldr	r2, [r3, #28]
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	055b      	lsls	r3, r3, #21
 80012c0:	4013      	ands	r3, r2
 80012c2:	d111      	bne.n	80012e8 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 80012c6:	69da      	ldr	r2, [r3, #28]
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 80012ca:	2180      	movs	r1, #128	; 0x80
 80012cc:	0549      	lsls	r1, r1, #21
 80012ce:	430a      	orrs	r2, r1
 80012d0:	61da      	str	r2, [r3, #28]
 80012d2:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 80012d4:	69da      	ldr	r2, [r3, #28]
 80012d6:	2380      	movs	r3, #128	; 0x80
 80012d8:	055b      	lsls	r3, r3, #21
 80012da:	4013      	ands	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012e0:	2317      	movs	r3, #23
 80012e2:	18fb      	adds	r3, r7, r3
 80012e4:	2201      	movs	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <HAL_RCC_OscConfig+0x334>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4013      	ands	r3, r2
 80012f2:	d11a      	bne.n	800132a <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_RCC_OscConfig+0x334>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_RCC_OscConfig+0x334>)
 80012fa:	2180      	movs	r1, #128	; 0x80
 80012fc:	0049      	lsls	r1, r1, #1
 80012fe:	430a      	orrs	r2, r1
 8001300:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001302:	f7fe ffc9 	bl	8000298 <HAL_GetTick>
 8001306:	0003      	movs	r3, r0
 8001308:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130c:	f7fe ffc4 	bl	8000298 <HAL_GetTick>
 8001310:	0002      	movs	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e162      	b.n	80015e4 <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_RCC_OscConfig+0x334>)
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4013      	ands	r3, r2
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d10e      	bne.n	8001350 <HAL_RCC_OscConfig+0x338>
 8001332:	4b03      	ldr	r3, [pc, #12]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 8001334:	6a1a      	ldr	r2, [r3, #32]
 8001336:	4b02      	ldr	r3, [pc, #8]	; (8001340 <HAL_RCC_OscConfig+0x328>)
 8001338:	2101      	movs	r1, #1
 800133a:	430a      	orrs	r2, r1
 800133c:	621a      	str	r2, [r3, #32]
 800133e:	e035      	b.n	80013ac <HAL_RCC_OscConfig+0x394>
 8001340:	40021000 	.word	0x40021000
 8001344:	fffeffff 	.word	0xfffeffff
 8001348:	fffbffff 	.word	0xfffbffff
 800134c:	40007000 	.word	0x40007000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d10c      	bne.n	8001372 <HAL_RCC_OscConfig+0x35a>
 8001358:	4ba4      	ldr	r3, [pc, #656]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 800135a:	6a1a      	ldr	r2, [r3, #32]
 800135c:	4ba3      	ldr	r3, [pc, #652]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 800135e:	2101      	movs	r1, #1
 8001360:	438a      	bics	r2, r1
 8001362:	621a      	str	r2, [r3, #32]
 8001364:	4ba1      	ldr	r3, [pc, #644]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 8001366:	6a1a      	ldr	r2, [r3, #32]
 8001368:	4ba0      	ldr	r3, [pc, #640]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 800136a:	2104      	movs	r1, #4
 800136c:	438a      	bics	r2, r1
 800136e:	621a      	str	r2, [r3, #32]
 8001370:	e01c      	b.n	80013ac <HAL_RCC_OscConfig+0x394>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b05      	cmp	r3, #5
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0x37c>
 800137a:	4b9c      	ldr	r3, [pc, #624]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 800137c:	6a1a      	ldr	r2, [r3, #32]
 800137e:	4b9b      	ldr	r3, [pc, #620]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 8001380:	2104      	movs	r1, #4
 8001382:	430a      	orrs	r2, r1
 8001384:	621a      	str	r2, [r3, #32]
 8001386:	4b99      	ldr	r3, [pc, #612]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 8001388:	6a1a      	ldr	r2, [r3, #32]
 800138a:	4b98      	ldr	r3, [pc, #608]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 800138c:	2101      	movs	r1, #1
 800138e:	430a      	orrs	r2, r1
 8001390:	621a      	str	r2, [r3, #32]
 8001392:	e00b      	b.n	80013ac <HAL_RCC_OscConfig+0x394>
 8001394:	4b95      	ldr	r3, [pc, #596]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 8001396:	6a1a      	ldr	r2, [r3, #32]
 8001398:	4b94      	ldr	r3, [pc, #592]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 800139a:	2101      	movs	r1, #1
 800139c:	438a      	bics	r2, r1
 800139e:	621a      	str	r2, [r3, #32]
 80013a0:	4b92      	ldr	r3, [pc, #584]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 80013a2:	6a1a      	ldr	r2, [r3, #32]
 80013a4:	4b91      	ldr	r3, [pc, #580]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 80013a6:	2104      	movs	r1, #4
 80013a8:	438a      	bics	r2, r1
 80013aa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d014      	beq.n	80013de <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b4:	f7fe ff70 	bl	8000298 <HAL_GetTick>
 80013b8:	0003      	movs	r3, r0
 80013ba:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013bc:	e009      	b.n	80013d2 <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013be:	f7fe ff6b 	bl	8000298 <HAL_GetTick>
 80013c2:	0002      	movs	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	4a89      	ldr	r2, [pc, #548]	; (80015f0 <HAL_RCC_OscConfig+0x5d8>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e108      	b.n	80015e4 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d2:	4b86      	ldr	r3, [pc, #536]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	2202      	movs	r2, #2
 80013d8:	4013      	ands	r3, r2
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x3a6>
 80013dc:	e013      	b.n	8001406 <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013de:	f7fe ff5b 	bl	8000298 <HAL_GetTick>
 80013e2:	0003      	movs	r3, r0
 80013e4:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e6:	e009      	b.n	80013fc <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e8:	f7fe ff56 	bl	8000298 <HAL_GetTick>
 80013ec:	0002      	movs	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	4a7f      	ldr	r2, [pc, #508]	; (80015f0 <HAL_RCC_OscConfig+0x5d8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e0f3      	b.n	80015e4 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fc:	4b7b      	ldr	r3, [pc, #492]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	2202      	movs	r2, #2
 8001402:	4013      	ands	r3, r2
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001406:	2317      	movs	r3, #23
 8001408:	18fb      	adds	r3, r7, r3
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d105      	bne.n	800141c <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001410:	4b76      	ldr	r3, [pc, #472]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 8001412:	69da      	ldr	r2, [r3, #28]
 8001414:	4b75      	ldr	r3, [pc, #468]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 8001416:	4977      	ldr	r1, [pc, #476]	; (80015f4 <HAL_RCC_OscConfig+0x5dc>)
 8001418:	400a      	ands	r2, r1
 800141a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2210      	movs	r2, #16
 8001422:	4013      	ands	r3, r2
 8001424:	d063      	beq.n	80014ee <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d12a      	bne.n	8001484 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800142e:	4b6f      	ldr	r3, [pc, #444]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 8001430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001432:	4b6e      	ldr	r3, [pc, #440]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 8001434:	2104      	movs	r1, #4
 8001436:	430a      	orrs	r2, r1
 8001438:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800143a:	4b6c      	ldr	r3, [pc, #432]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 800143c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800143e:	4b6b      	ldr	r3, [pc, #428]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 8001440:	2101      	movs	r1, #1
 8001442:	430a      	orrs	r2, r1
 8001444:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001446:	f7fe ff27 	bl	8000298 <HAL_GetTick>
 800144a:	0003      	movs	r3, r0
 800144c:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001450:	f7fe ff22 	bl	8000298 <HAL_GetTick>
 8001454:	0002      	movs	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e0c0      	b.n	80015e4 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001462:	4b62      	ldr	r3, [pc, #392]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 8001464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001466:	2202      	movs	r2, #2
 8001468:	4013      	ands	r3, r2
 800146a:	d0f1      	beq.n	8001450 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800146c:	4b5f      	ldr	r3, [pc, #380]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 800146e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001470:	22f8      	movs	r2, #248	; 0xf8
 8001472:	4393      	bics	r3, r2
 8001474:	0019      	movs	r1, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	00da      	lsls	r2, r3, #3
 800147c:	4b5b      	ldr	r3, [pc, #364]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 800147e:	430a      	orrs	r2, r1
 8001480:	635a      	str	r2, [r3, #52]	; 0x34
 8001482:	e034      	b.n	80014ee <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	3305      	adds	r3, #5
 800148a:	d111      	bne.n	80014b0 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800148c:	4b57      	ldr	r3, [pc, #348]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 800148e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001490:	4b56      	ldr	r3, [pc, #344]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 8001492:	2104      	movs	r1, #4
 8001494:	438a      	bics	r2, r1
 8001496:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001498:	4b54      	ldr	r3, [pc, #336]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 800149a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149c:	22f8      	movs	r2, #248	; 0xf8
 800149e:	4393      	bics	r3, r2
 80014a0:	0019      	movs	r1, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	00da      	lsls	r2, r3, #3
 80014a8:	4b50      	ldr	r3, [pc, #320]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 80014aa:	430a      	orrs	r2, r1
 80014ac:	635a      	str	r2, [r3, #52]	; 0x34
 80014ae:	e01e      	b.n	80014ee <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014b0:	4b4e      	ldr	r3, [pc, #312]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 80014b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014b4:	4b4d      	ldr	r3, [pc, #308]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 80014b6:	2104      	movs	r1, #4
 80014b8:	430a      	orrs	r2, r1
 80014ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80014bc:	4b4b      	ldr	r3, [pc, #300]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 80014be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014c0:	4b4a      	ldr	r3, [pc, #296]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 80014c2:	2101      	movs	r1, #1
 80014c4:	438a      	bics	r2, r1
 80014c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c8:	f7fe fee6 	bl	8000298 <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014d2:	f7fe fee1 	bl	8000298 <HAL_GetTick>
 80014d6:	0002      	movs	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e07f      	b.n	80015e4 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014e4:	4b41      	ldr	r3, [pc, #260]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 80014e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e8:	2202      	movs	r2, #2
 80014ea:	4013      	ands	r3, r2
 80014ec:	d1f1      	bne.n	80014d2 <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d100      	bne.n	80014f8 <HAL_RCC_OscConfig+0x4e0>
 80014f6:	e074      	b.n	80015e2 <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014f8:	4b3c      	ldr	r3, [pc, #240]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	220c      	movs	r2, #12
 80014fe:	4013      	ands	r3, r2
 8001500:	2b08      	cmp	r3, #8
 8001502:	d100      	bne.n	8001506 <HAL_RCC_OscConfig+0x4ee>
 8001504:	e06b      	b.n	80015de <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d14c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150e:	4b37      	ldr	r3, [pc, #220]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	4b36      	ldr	r3, [pc, #216]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 8001514:	4938      	ldr	r1, [pc, #224]	; (80015f8 <HAL_RCC_OscConfig+0x5e0>)
 8001516:	400a      	ands	r2, r1
 8001518:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7fe febd 	bl	8000298 <HAL_GetTick>
 800151e:	0003      	movs	r3, r0
 8001520:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001524:	f7fe feb8 	bl	8000298 <HAL_GetTick>
 8001528:	0002      	movs	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e056      	b.n	80015e4 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001536:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	049b      	lsls	r3, r3, #18
 800153e:	4013      	ands	r3, r2
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001542:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	220f      	movs	r2, #15
 8001548:	4393      	bics	r3, r2
 800154a:	0019      	movs	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001550:	4b26      	ldr	r3, [pc, #152]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 8001552:	430a      	orrs	r2, r1
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c
 8001556:	4b25      	ldr	r3, [pc, #148]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4a28      	ldr	r2, [pc, #160]	; (80015fc <HAL_RCC_OscConfig+0x5e4>)
 800155c:	4013      	ands	r3, r2
 800155e:	0019      	movs	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	431a      	orrs	r2, r3
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 800156c:	430a      	orrs	r2, r1
 800156e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001570:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 8001576:	2180      	movs	r1, #128	; 0x80
 8001578:	0449      	lsls	r1, r1, #17
 800157a:	430a      	orrs	r2, r1
 800157c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7fe fe8b 	bl	8000298 <HAL_GetTick>
 8001582:	0003      	movs	r3, r0
 8001584:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001588:	f7fe fe86 	bl	8000298 <HAL_GetTick>
 800158c:	0002      	movs	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e024      	b.n	80015e4 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	049b      	lsls	r3, r3, #18
 80015a2:	4013      	ands	r3, r2
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x570>
 80015a6:	e01c      	b.n	80015e2 <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a8:	4b10      	ldr	r3, [pc, #64]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 80015ae:	4912      	ldr	r1, [pc, #72]	; (80015f8 <HAL_RCC_OscConfig+0x5e0>)
 80015b0:	400a      	ands	r2, r1
 80015b2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7fe fe70 	bl	8000298 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015be:	f7fe fe6b 	bl	8000298 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e009      	b.n	80015e4 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_RCC_OscConfig+0x5d4>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	049b      	lsls	r3, r3, #18
 80015d8:	4013      	ands	r3, r2
 80015da:	d1f0      	bne.n	80015be <HAL_RCC_OscConfig+0x5a6>
 80015dc:	e001      	b.n	80015e2 <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b006      	add	sp, #24
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40021000 	.word	0x40021000
 80015f0:	00001388 	.word	0x00001388
 80015f4:	efffffff 	.word	0xefffffff
 80015f8:	feffffff 	.word	0xfeffffff
 80015fc:	ffc2ffff 	.word	0xffc2ffff

08001600 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800160e:	4b6a      	ldr	r3, [pc, #424]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2201      	movs	r2, #1
 8001614:	4013      	ands	r3, r2
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d911      	bls.n	8001640 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161c:	4b66      	ldr	r3, [pc, #408]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2201      	movs	r2, #1
 8001622:	4393      	bics	r3, r2
 8001624:	0019      	movs	r1, r3
 8001626:	4b64      	ldr	r3, [pc, #400]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800162e:	4b62      	ldr	r3, [pc, #392]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2201      	movs	r2, #1
 8001634:	4013      	ands	r3, r2
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0b6      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2202      	movs	r2, #2
 8001646:	4013      	ands	r3, r2
 8001648:	d009      	beq.n	800165e <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800164a:	4b5c      	ldr	r3, [pc, #368]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	22f0      	movs	r2, #240	; 0xf0
 8001650:	4393      	bics	r3, r2
 8001652:	0019      	movs	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	4b58      	ldr	r3, [pc, #352]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	430a      	orrs	r2, r1
 800165c:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2201      	movs	r2, #1
 8001664:	4013      	ands	r3, r2
 8001666:	d100      	bne.n	800166a <HAL_RCC_ClockConfig+0x6a>
 8001668:	e067      	b.n	800173a <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d107      	bne.n	8001682 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	4b52      	ldr	r3, [pc, #328]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	029b      	lsls	r3, r3, #10
 800167a:	4013      	ands	r3, r2
 800167c:	d114      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e095      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d107      	bne.n	800169a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168a:	4b4c      	ldr	r3, [pc, #304]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	049b      	lsls	r3, r3, #18
 8001692:	4013      	ands	r3, r2
 8001694:	d108      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e089      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169a:	4b48      	ldr	r3, [pc, #288]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2202      	movs	r2, #2
 80016a0:	4013      	ands	r3, r2
 80016a2:	d101      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e082      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016a8:	4b44      	ldr	r3, [pc, #272]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2203      	movs	r2, #3
 80016ae:	4393      	bics	r3, r2
 80016b0:	0019      	movs	r1, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	4b41      	ldr	r3, [pc, #260]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016b8:	430a      	orrs	r2, r1
 80016ba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016bc:	f7fe fdec 	bl	8000298 <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d111      	bne.n	80016f0 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016cc:	e009      	b.n	80016e2 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ce:	f7fe fde3 	bl	8000298 <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	4a39      	ldr	r2, [pc, #228]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e065      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80016e2:	4b36      	ldr	r3, [pc, #216]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	220c      	movs	r2, #12
 80016e8:	4013      	ands	r3, r2
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d1ef      	bne.n	80016ce <HAL_RCC_ClockConfig+0xce>
 80016ee:	e024      	b.n	800173a <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d11b      	bne.n	8001730 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f8:	e009      	b.n	800170e <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016fa:	f7fe fdcd 	bl	8000298 <HAL_GetTick>
 80016fe:	0002      	movs	r2, r0
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	4a2e      	ldr	r2, [pc, #184]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e04f      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800170e:	4b2b      	ldr	r3, [pc, #172]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	220c      	movs	r2, #12
 8001714:	4013      	ands	r3, r2
 8001716:	2b08      	cmp	r3, #8
 8001718:	d1ef      	bne.n	80016fa <HAL_RCC_ClockConfig+0xfa>
 800171a:	e00e      	b.n	800173a <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800171c:	f7fe fdbc 	bl	8000298 <HAL_GetTick>
 8001720:	0002      	movs	r2, r0
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	4a26      	ldr	r2, [pc, #152]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e03e      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001730:	4b22      	ldr	r3, [pc, #136]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	220c      	movs	r2, #12
 8001736:	4013      	ands	r3, r2
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800173a:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2201      	movs	r2, #1
 8001740:	4013      	ands	r3, r2
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d211      	bcs.n	800176c <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001748:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2201      	movs	r2, #1
 800174e:	4393      	bics	r3, r2
 8001750:	0019      	movs	r1, r3
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2201      	movs	r2, #1
 8001760:	4013      	ands	r3, r2
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e020      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2204      	movs	r2, #4
 8001772:	4013      	ands	r3, r2
 8001774:	d009      	beq.n	800178a <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 800177c:	4013      	ands	r3, r2
 800177e:	0019      	movs	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	430a      	orrs	r2, r1
 8001788:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800178a:	f000 f821 	bl	80017d0 <HAL_RCC_GetSysClockFreq>
 800178e:	0001      	movs	r1, r0
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	091b      	lsrs	r3, r3, #4
 8001796:	220f      	movs	r2, #15
 8001798:	4013      	ands	r3, r2
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <HAL_RCC_ClockConfig+0x1c8>)
 800179c:	5cd3      	ldrb	r3, [r2, r3]
 800179e:	000a      	movs	r2, r1
 80017a0:	40da      	lsrs	r2, r3
 80017a2:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <HAL_RCC_ClockConfig+0x1cc>)
 80017a4:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80017a6:	2000      	movs	r0, #0
 80017a8:	f7fe fd4e 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	0018      	movs	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b004      	add	sp, #16
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	40022000 	.word	0x40022000
 80017bc:	40021000 	.word	0x40021000
 80017c0:	00001388 	.word	0x00001388
 80017c4:	fffff8ff 	.word	0xfffff8ff
 80017c8:	08002b1c 	.word	0x08002b1c
 80017cc:	20000000 	.word	0x20000000

080017d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b08f      	sub	sp, #60	; 0x3c
 80017d4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80017d6:	2314      	movs	r3, #20
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	4a2b      	ldr	r2, [pc, #172]	; (8001888 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017de:	c313      	stmia	r3!, {r0, r1, r4}
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	4a29      	ldr	r2, [pc, #164]	; (800188c <HAL_RCC_GetSysClockFreq+0xbc>)
 80017e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80017ea:	c313      	stmia	r3!, {r0, r1, r4}
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f4:	2300      	movs	r3, #0
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017f8:	2300      	movs	r3, #0
 80017fa:	637b      	str	r3, [r7, #52]	; 0x34
 80017fc:	2300      	movs	r3, #0
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001804:	4b22      	ldr	r3, [pc, #136]	; (8001890 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800180a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180c:	220c      	movs	r2, #12
 800180e:	4013      	ands	r3, r2
 8001810:	2b04      	cmp	r3, #4
 8001812:	d002      	beq.n	800181a <HAL_RCC_GetSysClockFreq+0x4a>
 8001814:	2b08      	cmp	r3, #8
 8001816:	d003      	beq.n	8001820 <HAL_RCC_GetSysClockFreq+0x50>
 8001818:	e02d      	b.n	8001876 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <HAL_RCC_GetSysClockFreq+0xc4>)
 800181c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800181e:	e02d      	b.n	800187c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001822:	0c9b      	lsrs	r3, r3, #18
 8001824:	220f      	movs	r2, #15
 8001826:	4013      	ands	r3, r2
 8001828:	2214      	movs	r2, #20
 800182a:	18ba      	adds	r2, r7, r2
 800182c:	5cd3      	ldrb	r3, [r2, r3]
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001830:	4b17      	ldr	r3, [pc, #92]	; (8001890 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	220f      	movs	r2, #15
 8001836:	4013      	ands	r3, r2
 8001838:	1d3a      	adds	r2, r7, #4
 800183a:	5cd3      	ldrb	r3, [r2, r3]
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800183e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	025b      	lsls	r3, r3, #9
 8001844:	4013      	ands	r3, r2
 8001846:	d009      	beq.n	800185c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800184a:	4812      	ldr	r0, [pc, #72]	; (8001894 <HAL_RCC_GetSysClockFreq+0xc4>)
 800184c:	f7fe fc5c 	bl	8000108 <__udivsi3>
 8001850:	0003      	movs	r3, r0
 8001852:	001a      	movs	r2, r3
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	4353      	muls	r3, r2
 8001858:	637b      	str	r3, [r7, #52]	; 0x34
 800185a:	e009      	b.n	8001870 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 800185c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800185e:	000a      	movs	r2, r1
 8001860:	0152      	lsls	r2, r2, #5
 8001862:	1a52      	subs	r2, r2, r1
 8001864:	0193      	lsls	r3, r2, #6
 8001866:	1a9b      	subs	r3, r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	185b      	adds	r3, r3, r1
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001872:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001874:	e002      	b.n	800187c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001876:	4b07      	ldr	r3, [pc, #28]	; (8001894 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001878:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800187a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800187c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800187e:	0018      	movs	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	b00f      	add	sp, #60	; 0x3c
 8001884:	bd90      	pop	{r4, r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	08002afc 	.word	0x08002afc
 800188c:	08002b0c 	.word	0x08002b0c
 8001890:	40021000 	.word	0x40021000
 8001894:	007a1200 	.word	0x007a1200

08001898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800189c:	4b02      	ldr	r3, [pc, #8]	; (80018a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	0018      	movs	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	20000000 	.word	0x20000000

080018ac <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e01e      	b.n	80018fc <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	223d      	movs	r2, #61	; 0x3d
 80018c2:	5c9b      	ldrb	r3, [r3, r2]
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d107      	bne.n	80018da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	223c      	movs	r2, #60	; 0x3c
 80018ce:	2100      	movs	r1, #0
 80018d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	0018      	movs	r0, r3
 80018d6:	f000 fff7 	bl	80028c8 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	223d      	movs	r2, #61	; 0x3d
 80018de:	2102      	movs	r1, #2
 80018e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3304      	adds	r3, #4
 80018ea:	0019      	movs	r1, r3
 80018ec:	0010      	movs	r0, r2
 80018ee:	f000 fa19 	bl	8001d24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	223d      	movs	r2, #61	; 0x3d
 80018f6:	2101      	movs	r1, #1
 80018f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	0018      	movs	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	b002      	add	sp, #8
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e01e      	b.n	8001954 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	223d      	movs	r2, #61	; 0x3d
 800191a:	5c9b      	ldrb	r3, [r3, r2]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d107      	bne.n	8001932 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	223c      	movs	r2, #60	; 0x3c
 8001926:	2100      	movs	r1, #0
 8001928:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	0018      	movs	r0, r3
 800192e:	f000 f815 	bl	800195c <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	223d      	movs	r2, #61	; 0x3d
 8001936:	2102      	movs	r1, #2
 8001938:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3304      	adds	r3, #4
 8001942:	0019      	movs	r1, r3
 8001944:	0010      	movs	r0, r2
 8001946:	f000 f9ed 	bl	8001d24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	223d      	movs	r2, #61	; 0x3d
 800194e:	2101      	movs	r1, #1
 8001950:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	0018      	movs	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	b002      	add	sp, #8
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	b002      	add	sp, #8
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6839      	ldr	r1, [r7, #0]
 800197c:	2201      	movs	r2, #1
 800197e:	0018      	movs	r0, r3
 8001980:	f000 fd10 	bl	80023a4 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a16      	ldr	r2, [pc, #88]	; (80019e4 <HAL_TIM_PWM_Start+0x78>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d00e      	beq.n	80019ac <HAL_TIM_PWM_Start+0x40>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a15      	ldr	r2, [pc, #84]	; (80019e8 <HAL_TIM_PWM_Start+0x7c>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d009      	beq.n	80019ac <HAL_TIM_PWM_Start+0x40>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a13      	ldr	r2, [pc, #76]	; (80019ec <HAL_TIM_PWM_Start+0x80>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d004      	beq.n	80019ac <HAL_TIM_PWM_Start+0x40>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <HAL_TIM_PWM_Start+0x84>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d101      	bne.n	80019b0 <HAL_TIM_PWM_Start+0x44>
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <HAL_TIM_PWM_Start+0x46>
 80019b0:	2300      	movs	r3, #0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d008      	beq.n	80019c8 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2180      	movs	r1, #128	; 0x80
 80019c2:	0209      	lsls	r1, r1, #8
 80019c4:	430a      	orrs	r2, r1
 80019c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2101      	movs	r1, #1
 80019d4:	430a      	orrs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	0018      	movs	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	b002      	add	sp, #8
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	40012c00 	.word	0x40012c00
 80019e8:	40014000 	.word	0x40014000
 80019ec:	40014400 	.word	0x40014400
 80019f0:	40014800 	.word	0x40014800

080019f4 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	223c      	movs	r2, #60	; 0x3c
 8001a04:	5c9b      	ldrb	r3, [r3, r2]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d101      	bne.n	8001a0e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	e0a4      	b.n	8001b58 <HAL_TIM_PWM_ConfigChannel+0x164>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	223c      	movs	r2, #60	; 0x3c
 8001a12:	2101      	movs	r1, #1
 8001a14:	5499      	strb	r1, [r3, r2]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	223d      	movs	r2, #61	; 0x3d
 8001a1a:	2102      	movs	r1, #2
 8001a1c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d029      	beq.n	8001a78 <HAL_TIM_PWM_ConfigChannel+0x84>
 8001a24:	d802      	bhi.n	8001a2c <HAL_TIM_PWM_ConfigChannel+0x38>
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d005      	beq.n	8001a36 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
    }
    break;

    default:
    break;
 8001a2a:	e08c      	b.n	8001b46 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d046      	beq.n	8001abe <HAL_TIM_PWM_ConfigChannel+0xca>
 8001a30:	2b0c      	cmp	r3, #12
 8001a32:	d065      	beq.n	8001b00 <HAL_TIM_PWM_ConfigChannel+0x10c>
    break;
 8001a34:	e087      	b.n	8001b46 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	0011      	movs	r1, r2
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 f9f2 	bl	8001e28 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699a      	ldr	r2, [r3, #24]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2108      	movs	r1, #8
 8001a50:	430a      	orrs	r2, r1
 8001a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699a      	ldr	r2, [r3, #24]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2104      	movs	r1, #4
 8001a60:	438a      	bics	r2, r1
 8001a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6999      	ldr	r1, [r3, #24]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	619a      	str	r2, [r3, #24]
    break;
 8001a76:	e066      	b.n	8001b46 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	0011      	movs	r1, r2
 8001a80:	0018      	movs	r0, r3
 8001a82:	f000 fa5f 	bl	8001f44 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699a      	ldr	r2, [r3, #24]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2180      	movs	r1, #128	; 0x80
 8001a92:	0109      	lsls	r1, r1, #4
 8001a94:	430a      	orrs	r2, r1
 8001a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	699a      	ldr	r2, [r3, #24]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	492f      	ldr	r1, [pc, #188]	; (8001b60 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6999      	ldr	r1, [r3, #24]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	021a      	lsls	r2, r3, #8
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	619a      	str	r2, [r3, #24]
    break;
 8001abc:	e043      	b.n	8001b46 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	0011      	movs	r1, r2
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f000 fac6 	bl	8002058 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	69da      	ldr	r2, [r3, #28]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2108      	movs	r1, #8
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	69da      	ldr	r2, [r3, #28]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2104      	movs	r1, #4
 8001ae8:	438a      	bics	r2, r1
 8001aea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	69d9      	ldr	r1, [r3, #28]
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	61da      	str	r2, [r3, #28]
    break;
 8001afe:	e022      	b.n	8001b46 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	0011      	movs	r1, r2
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f000 fb31 	bl	8002170 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	69da      	ldr	r2, [r3, #28]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2180      	movs	r1, #128	; 0x80
 8001b1a:	0109      	lsls	r1, r1, #4
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	69da      	ldr	r2, [r3, #28]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	490d      	ldr	r1, [pc, #52]	; (8001b60 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	69d9      	ldr	r1, [r3, #28]
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	021a      	lsls	r2, r3, #8
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	61da      	str	r2, [r3, #28]
    break;
 8001b44:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	223d      	movs	r2, #61	; 0x3d
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	223c      	movs	r2, #60	; 0x3c
 8001b52:	2100      	movs	r1, #0
 8001b54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	0018      	movs	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b004      	add	sp, #16
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	fffffbff 	.word	0xfffffbff

08001b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	223c      	movs	r2, #60	; 0x3c
 8001b76:	5c9b      	ldrb	r3, [r3, r2]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d101      	bne.n	8001b80 <HAL_TIM_ConfigClockSource+0x1c>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e0ca      	b.n	8001d16 <HAL_TIM_ConfigClockSource+0x1b2>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	223c      	movs	r2, #60	; 0x3c
 8001b84:	2101      	movs	r1, #1
 8001b86:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	223d      	movs	r2, #61	; 0x3d
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2277      	movs	r2, #119	; 0x77
 8001b9c:	4393      	bics	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4a5f      	ldr	r2, [pc, #380]	; (8001d20 <HAL_TIM_ConfigClockSource+0x1bc>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b40      	cmp	r3, #64	; 0x40
 8001bb6:	d100      	bne.n	8001bba <HAL_TIM_ConfigClockSource+0x56>
 8001bb8:	e078      	b.n	8001cac <HAL_TIM_ConfigClockSource+0x148>
 8001bba:	d80e      	bhi.n	8001bda <HAL_TIM_ConfigClockSource+0x76>
 8001bbc:	2b10      	cmp	r3, #16
 8001bbe:	d100      	bne.n	8001bc2 <HAL_TIM_ConfigClockSource+0x5e>
 8001bc0:	e08b      	b.n	8001cda <HAL_TIM_ConfigClockSource+0x176>
 8001bc2:	d803      	bhi.n	8001bcc <HAL_TIM_ConfigClockSource+0x68>
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d100      	bne.n	8001bca <HAL_TIM_ConfigClockSource+0x66>
 8001bc8:	e080      	b.n	8001ccc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8001bca:	e09b      	b.n	8001d04 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 8001bcc:	2b20      	cmp	r3, #32
 8001bce:	d100      	bne.n	8001bd2 <HAL_TIM_ConfigClockSource+0x6e>
 8001bd0:	e08a      	b.n	8001ce8 <HAL_TIM_ConfigClockSource+0x184>
 8001bd2:	2b30      	cmp	r3, #48	; 0x30
 8001bd4:	d100      	bne.n	8001bd8 <HAL_TIM_ConfigClockSource+0x74>
 8001bd6:	e08e      	b.n	8001cf6 <HAL_TIM_ConfigClockSource+0x192>
    break;
 8001bd8:	e094      	b.n	8001d04 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 8001bda:	2b70      	cmp	r3, #112	; 0x70
 8001bdc:	d017      	beq.n	8001c0e <HAL_TIM_ConfigClockSource+0xaa>
 8001bde:	d804      	bhi.n	8001bea <HAL_TIM_ConfigClockSource+0x86>
 8001be0:	2b50      	cmp	r3, #80	; 0x50
 8001be2:	d043      	beq.n	8001c6c <HAL_TIM_ConfigClockSource+0x108>
 8001be4:	2b60      	cmp	r3, #96	; 0x60
 8001be6:	d051      	beq.n	8001c8c <HAL_TIM_ConfigClockSource+0x128>
    break;
 8001be8:	e08c      	b.n	8001d04 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 8001bea:	2280      	movs	r2, #128	; 0x80
 8001bec:	0152      	lsls	r2, r2, #5
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d004      	beq.n	8001bfc <HAL_TIM_ConfigClockSource+0x98>
 8001bf2:	2280      	movs	r2, #128	; 0x80
 8001bf4:	0192      	lsls	r2, r2, #6
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d024      	beq.n	8001c44 <HAL_TIM_ConfigClockSource+0xe0>
    break;
 8001bfa:	e083      	b.n	8001d04 <HAL_TIM_ConfigClockSource+0x1a0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2107      	movs	r1, #7
 8001c08:	438a      	bics	r2, r1
 8001c0a:	609a      	str	r2, [r3, #8]
    break;
 8001c0c:	e07a      	b.n	8001d04 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ETR_SetConfig(htim->Instance,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	6899      	ldr	r1, [r3, #8]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685a      	ldr	r2, [r3, #4]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f000 fb9f 	bl	8002360 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2277      	movs	r2, #119	; 0x77
 8001c2e:	4393      	bics	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2277      	movs	r2, #119	; 0x77
 8001c36:	4313      	orrs	r3, r2
 8001c38:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	609a      	str	r2, [r3, #8]
    break;
 8001c42:	e05f      	b.n	8001d04 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ETR_SetConfig(htim->Instance,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6899      	ldr	r1, [r3, #8]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f000 fb84 	bl	8002360 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2180      	movs	r1, #128	; 0x80
 8001c64:	01c9      	lsls	r1, r1, #7
 8001c66:	430a      	orrs	r2, r1
 8001c68:	609a      	str	r2, [r3, #8]
    break;
 8001c6a:	e04b      	b.n	8001d04 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	6859      	ldr	r1, [r3, #4]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	001a      	movs	r2, r3
 8001c7a:	f000 fae9 	bl	8002250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2150      	movs	r1, #80	; 0x50
 8001c84:	0018      	movs	r0, r3
 8001c86:	f000 fb4b 	bl	8002320 <TIM_ITRx_SetConfig>
    break;
 8001c8a:	e03b      	b.n	8001d04 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	001a      	movs	r2, r3
 8001c9a:	f000 fb0b 	bl	80022b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2160      	movs	r1, #96	; 0x60
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f000 fb3b 	bl	8002320 <TIM_ITRx_SetConfig>
    break;
 8001caa:	e02b      	b.n	8001d04 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	6859      	ldr	r1, [r3, #4]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	001a      	movs	r2, r3
 8001cba:	f000 fac9 	bl	8002250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2140      	movs	r1, #64	; 0x40
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f000 fb2b 	bl	8002320 <TIM_ITRx_SetConfig>
    break;
 8001cca:	e01b      	b.n	8001d04 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f000 fb24 	bl	8002320 <TIM_ITRx_SetConfig>
    break;
 8001cd8:	e014      	b.n	8001d04 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2110      	movs	r1, #16
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f000 fb1d 	bl	8002320 <TIM_ITRx_SetConfig>
    break;
 8001ce6:	e00d      	b.n	8001d04 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2120      	movs	r1, #32
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f000 fb16 	bl	8002320 <TIM_ITRx_SetConfig>
    break;
 8001cf4:	e006      	b.n	8001d04 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2130      	movs	r1, #48	; 0x30
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f000 fb0f 	bl	8002320 <TIM_ITRx_SetConfig>
    break;
 8001d02:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	223d      	movs	r2, #61	; 0x3d
 8001d08:	2101      	movs	r1, #1
 8001d0a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	223c      	movs	r2, #60	; 0x3c
 8001d10:	2100      	movs	r1, #0
 8001d12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	0018      	movs	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b004      	add	sp, #16
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	46c0      	nop			; (mov r8, r8)
 8001d20:	ffff00ff 	.word	0xffff00ff

08001d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a34      	ldr	r2, [pc, #208]	; (8001e0c <TIM_Base_SetConfig+0xe8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d008      	beq.n	8001d52 <TIM_Base_SetConfig+0x2e>
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	05db      	lsls	r3, r3, #23
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d003      	beq.n	8001d52 <TIM_Base_SetConfig+0x2e>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a30      	ldr	r2, [pc, #192]	; (8001e10 <TIM_Base_SetConfig+0xec>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d108      	bne.n	8001d64 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2270      	movs	r2, #112	; 0x70
 8001d56:	4393      	bics	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a29      	ldr	r2, [pc, #164]	; (8001e0c <TIM_Base_SetConfig+0xe8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d018      	beq.n	8001d9e <TIM_Base_SetConfig+0x7a>
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	2380      	movs	r3, #128	; 0x80
 8001d70:	05db      	lsls	r3, r3, #23
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d013      	beq.n	8001d9e <TIM_Base_SetConfig+0x7a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a25      	ldr	r2, [pc, #148]	; (8001e10 <TIM_Base_SetConfig+0xec>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00f      	beq.n	8001d9e <TIM_Base_SetConfig+0x7a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a24      	ldr	r2, [pc, #144]	; (8001e14 <TIM_Base_SetConfig+0xf0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00b      	beq.n	8001d9e <TIM_Base_SetConfig+0x7a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a23      	ldr	r2, [pc, #140]	; (8001e18 <TIM_Base_SetConfig+0xf4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d007      	beq.n	8001d9e <TIM_Base_SetConfig+0x7a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a22      	ldr	r2, [pc, #136]	; (8001e1c <TIM_Base_SetConfig+0xf8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d003      	beq.n	8001d9e <TIM_Base_SetConfig+0x7a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a21      	ldr	r2, [pc, #132]	; (8001e20 <TIM_Base_SetConfig+0xfc>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d108      	bne.n	8001db0 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4a20      	ldr	r2, [pc, #128]	; (8001e24 <TIM_Base_SetConfig+0x100>)
 8001da2:	4013      	ands	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2280      	movs	r2, #128	; 0x80
 8001db4:	4393      	bics	r3, r2
 8001db6:	001a      	movs	r2, r3
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <TIM_Base_SetConfig+0xe8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00b      	beq.n	8001df6 <TIM_Base_SetConfig+0xd2>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a0d      	ldr	r2, [pc, #52]	; (8001e18 <TIM_Base_SetConfig+0xf4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d007      	beq.n	8001df6 <TIM_Base_SetConfig+0xd2>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a0c      	ldr	r2, [pc, #48]	; (8001e1c <TIM_Base_SetConfig+0xf8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d003      	beq.n	8001df6 <TIM_Base_SetConfig+0xd2>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a0b      	ldr	r2, [pc, #44]	; (8001e20 <TIM_Base_SetConfig+0xfc>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d103      	bne.n	8001dfe <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	691a      	ldr	r2, [r3, #16]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	615a      	str	r2, [r3, #20]
}
 8001e04:	46c0      	nop			; (mov r8, r8)
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b004      	add	sp, #16
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40012c00 	.word	0x40012c00
 8001e10:	40000400 	.word	0x40000400
 8001e14:	40002000 	.word	0x40002000
 8001e18:	40014000 	.word	0x40014000
 8001e1c:	40014400 	.word	0x40014400
 8001e20:	40014800 	.word	0x40014800
 8001e24:	fffffcff 	.word	0xfffffcff

08001e28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	2201      	movs	r2, #1
 8001e44:	4393      	bics	r3, r2
 8001e46:	001a      	movs	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2270      	movs	r2, #112	; 0x70
 8001e62:	4393      	bics	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2203      	movs	r2, #3
 8001e6a:	4393      	bics	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	4393      	bics	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a27      	ldr	r2, [pc, #156]	; (8001f2c <TIM_OC1_SetConfig+0x104>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00b      	beq.n	8001eaa <TIM_OC1_SetConfig+0x82>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a26      	ldr	r2, [pc, #152]	; (8001f30 <TIM_OC1_SetConfig+0x108>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d007      	beq.n	8001eaa <TIM_OC1_SetConfig+0x82>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a25      	ldr	r2, [pc, #148]	; (8001f34 <TIM_OC1_SetConfig+0x10c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d003      	beq.n	8001eaa <TIM_OC1_SetConfig+0x82>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a24      	ldr	r2, [pc, #144]	; (8001f38 <TIM_OC1_SetConfig+0x110>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d10c      	bne.n	8001ec4 <TIM_OC1_SetConfig+0x9c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2208      	movs	r2, #8
 8001eae:	4393      	bics	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	4393      	bics	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a19      	ldr	r2, [pc, #100]	; (8001f2c <TIM_OC1_SetConfig+0x104>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00b      	beq.n	8001ee4 <TIM_OC1_SetConfig+0xbc>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a18      	ldr	r2, [pc, #96]	; (8001f30 <TIM_OC1_SetConfig+0x108>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d007      	beq.n	8001ee4 <TIM_OC1_SetConfig+0xbc>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a17      	ldr	r2, [pc, #92]	; (8001f34 <TIM_OC1_SetConfig+0x10c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d003      	beq.n	8001ee4 <TIM_OC1_SetConfig+0xbc>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a16      	ldr	r2, [pc, #88]	; (8001f38 <TIM_OC1_SetConfig+0x110>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d111      	bne.n	8001f08 <TIM_OC1_SetConfig+0xe0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4a15      	ldr	r2, [pc, #84]	; (8001f3c <TIM_OC1_SetConfig+0x114>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <TIM_OC1_SetConfig+0x118>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	621a      	str	r2, [r3, #32]
}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	46bd      	mov	sp, r7
 8001f26:	b006      	add	sp, #24
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	40012c00 	.word	0x40012c00
 8001f30:	40014000 	.word	0x40014000
 8001f34:	40014400 	.word	0x40014400
 8001f38:	40014800 	.word	0x40014800
 8001f3c:	fffffeff 	.word	0xfffffeff
 8001f40:	fffffdff 	.word	0xfffffdff

08001f44 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	2210      	movs	r2, #16
 8001f60:	4393      	bics	r3, r2
 8001f62:	001a      	movs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4a2e      	ldr	r2, [pc, #184]	; (8002038 <TIM_OC2_SetConfig+0xf4>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4a2d      	ldr	r2, [pc, #180]	; (800203c <TIM_OC2_SetConfig+0xf8>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2220      	movs	r2, #32
 8001f9a:	4393      	bics	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a24      	ldr	r2, [pc, #144]	; (8002040 <TIM_OC2_SetConfig+0xfc>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d10d      	bne.n	8001fce <TIM_OC2_SetConfig+0x8a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2280      	movs	r2, #128	; 0x80
 8001fb6:	4393      	bics	r3, r2
 8001fb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2240      	movs	r2, #64	; 0x40
 8001fca:	4393      	bics	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a1b      	ldr	r2, [pc, #108]	; (8002040 <TIM_OC2_SetConfig+0xfc>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00b      	beq.n	8001fee <TIM_OC2_SetConfig+0xaa>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a1a      	ldr	r2, [pc, #104]	; (8002044 <TIM_OC2_SetConfig+0x100>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <TIM_OC2_SetConfig+0xaa>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a19      	ldr	r2, [pc, #100]	; (8002048 <TIM_OC2_SetConfig+0x104>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d003      	beq.n	8001fee <TIM_OC2_SetConfig+0xaa>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a18      	ldr	r2, [pc, #96]	; (800204c <TIM_OC2_SetConfig+0x108>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d113      	bne.n	8002016 <TIM_OC2_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a17      	ldr	r2, [pc, #92]	; (8002050 <TIM_OC2_SetConfig+0x10c>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4a16      	ldr	r2, [pc, #88]	; (8002054 <TIM_OC2_SetConfig+0x110>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	621a      	str	r2, [r3, #32]
}
 8002030:	46c0      	nop			; (mov r8, r8)
 8002032:	46bd      	mov	sp, r7
 8002034:	b006      	add	sp, #24
 8002036:	bd80      	pop	{r7, pc}
 8002038:	ffff8fff 	.word	0xffff8fff
 800203c:	fffffcff 	.word	0xfffffcff
 8002040:	40012c00 	.word	0x40012c00
 8002044:	40014000 	.word	0x40014000
 8002048:	40014400 	.word	0x40014400
 800204c:	40014800 	.word	0x40014800
 8002050:	fffffbff 	.word	0xfffffbff
 8002054:	fffff7ff 	.word	0xfffff7ff

08002058 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800206a:	2300      	movs	r3, #0
 800206c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a35      	ldr	r2, [pc, #212]	; (8002148 <TIM_OC3_SetConfig+0xf0>)
 8002074:	401a      	ands	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2270      	movs	r2, #112	; 0x70
 8002090:	4393      	bics	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2203      	movs	r2, #3
 8002098:	4393      	bics	r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	4a28      	ldr	r2, [pc, #160]	; (800214c <TIM_OC3_SetConfig+0xf4>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a24      	ldr	r2, [pc, #144]	; (8002150 <TIM_OC3_SetConfig+0xf8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d10d      	bne.n	80020de <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	4a23      	ldr	r2, [pc, #140]	; (8002154 <TIM_OC3_SetConfig+0xfc>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	021b      	lsls	r3, r3, #8
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	4a1f      	ldr	r2, [pc, #124]	; (8002158 <TIM_OC3_SetConfig+0x100>)
 80020da:	4013      	ands	r3, r2
 80020dc:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a1b      	ldr	r2, [pc, #108]	; (8002150 <TIM_OC3_SetConfig+0xf8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d00b      	beq.n	80020fe <TIM_OC3_SetConfig+0xa6>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a1c      	ldr	r2, [pc, #112]	; (800215c <TIM_OC3_SetConfig+0x104>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d007      	beq.n	80020fe <TIM_OC3_SetConfig+0xa6>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a1b      	ldr	r2, [pc, #108]	; (8002160 <TIM_OC3_SetConfig+0x108>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d003      	beq.n	80020fe <TIM_OC3_SetConfig+0xa6>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a1a      	ldr	r2, [pc, #104]	; (8002164 <TIM_OC3_SetConfig+0x10c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d113      	bne.n	8002126 <TIM_OC3_SetConfig+0xce>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4a19      	ldr	r2, [pc, #100]	; (8002168 <TIM_OC3_SetConfig+0x110>)
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4a18      	ldr	r2, [pc, #96]	; (800216c <TIM_OC3_SetConfig+0x114>)
 800210a:	4013      	ands	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	621a      	str	r2, [r3, #32]
}
 8002140:	46c0      	nop			; (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	b006      	add	sp, #24
 8002146:	bd80      	pop	{r7, pc}
 8002148:	fffffeff 	.word	0xfffffeff
 800214c:	fffffdff 	.word	0xfffffdff
 8002150:	40012c00 	.word	0x40012c00
 8002154:	fffff7ff 	.word	0xfffff7ff
 8002158:	fffffbff 	.word	0xfffffbff
 800215c:	40014000 	.word	0x40014000
 8002160:	40014400 	.word	0x40014400
 8002164:	40014800 	.word	0x40014800
 8002168:	ffffefff 	.word	0xffffefff
 800216c:	ffffdfff 	.word	0xffffdfff

08002170 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	4a28      	ldr	r2, [pc, #160]	; (800222c <TIM_OC4_SetConfig+0xbc>)
 800218c:	401a      	ands	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4a22      	ldr	r2, [pc, #136]	; (8002230 <TIM_OC4_SetConfig+0xc0>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4a21      	ldr	r2, [pc, #132]	; (8002234 <TIM_OC4_SetConfig+0xc4>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4a1d      	ldr	r2, [pc, #116]	; (8002238 <TIM_OC4_SetConfig+0xc8>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	031b      	lsls	r3, r3, #12
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a19      	ldr	r2, [pc, #100]	; (800223c <TIM_OC4_SetConfig+0xcc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d00b      	beq.n	80021f4 <TIM_OC4_SetConfig+0x84>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a18      	ldr	r2, [pc, #96]	; (8002240 <TIM_OC4_SetConfig+0xd0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d007      	beq.n	80021f4 <TIM_OC4_SetConfig+0x84>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a17      	ldr	r2, [pc, #92]	; (8002244 <TIM_OC4_SetConfig+0xd4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d003      	beq.n	80021f4 <TIM_OC4_SetConfig+0x84>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a16      	ldr	r2, [pc, #88]	; (8002248 <TIM_OC4_SetConfig+0xd8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d109      	bne.n	8002208 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	4a15      	ldr	r2, [pc, #84]	; (800224c <TIM_OC4_SetConfig+0xdc>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	019b      	lsls	r3, r3, #6
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	621a      	str	r2, [r3, #32]
}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	46bd      	mov	sp, r7
 8002226:	b006      	add	sp, #24
 8002228:	bd80      	pop	{r7, pc}
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	ffffefff 	.word	0xffffefff
 8002230:	ffff8fff 	.word	0xffff8fff
 8002234:	fffffcff 	.word	0xfffffcff
 8002238:	ffffdfff 	.word	0xffffdfff
 800223c:	40012c00 	.word	0x40012c00
 8002240:	40014000 	.word	0x40014000
 8002244:	40014400 	.word	0x40014400
 8002248:	40014800 	.word	0x40014800
 800224c:	ffffbfff 	.word	0xffffbfff

08002250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	2201      	movs	r2, #1
 8002270:	4393      	bics	r3, r2
 8002272:	001a      	movs	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	22f0      	movs	r2, #240	; 0xf0
 8002282:	4393      	bics	r3, r2
 8002284:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4313      	orrs	r3, r2
 800228e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	220a      	movs	r2, #10
 8002294:	4393      	bics	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	621a      	str	r2, [r3, #32]
}
 80022ac:	46c0      	nop			; (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b006      	add	sp, #24
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	2210      	movs	r2, #16
 80022ce:	4393      	bics	r3, r2
 80022d0:	001a      	movs	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	4a0d      	ldr	r2, [pc, #52]	; (800231c <TIM_TI2_ConfigInputStage+0x68>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	031b      	lsls	r3, r3, #12
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	22a0      	movs	r2, #160	; 0xa0
 80022f8:	4393      	bics	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	621a      	str	r2, [r3, #32]
}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	b006      	add	sp, #24
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	ffff0fff 	.word	0xffff0fff

08002320 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	000a      	movs	r2, r1
 800232a:	1cbb      	adds	r3, r7, #2
 800232c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpsmcr = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2270      	movs	r2, #112	; 0x70
 800233c:	4393      	bics	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002340:	1cbb      	adds	r3, r7, #2
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	2207      	movs	r2, #7
 8002346:	4313      	orrs	r3, r2
 8002348:	b29b      	uxth	r3, r3
 800234a:	001a      	movs	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4313      	orrs	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	609a      	str	r2, [r3, #8]
}
 8002358:	46c0      	nop			; (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	b004      	add	sp, #16
 800235e:	bd80      	pop	{r7, pc}

08002360 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	4a09      	ldr	r2, [pc, #36]	; (80023a0 <TIM_ETR_SetConfig+0x40>)
 800237c:	4013      	ands	r3, r2
 800237e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	021a      	lsls	r2, r3, #8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	431a      	orrs	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4313      	orrs	r3, r2
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	4313      	orrs	r3, r2
 8002390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	609a      	str	r2, [r3, #8]
}
 8002398:	46c0      	nop			; (mov r8, r8)
 800239a:	46bd      	mov	sp, r7
 800239c:	b006      	add	sp, #24
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	ffff00ff 	.word	0xffff00ff

080023a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80023b4:	2201      	movs	r2, #1
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	409a      	lsls	r2, r3
 80023ba:	0013      	movs	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	43d2      	mvns	r2, r2
 80023c6:	401a      	ands	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a1a      	ldr	r2, [r3, #32]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	4099      	lsls	r1, r3
 80023d6:	000b      	movs	r3, r1
 80023d8:	431a      	orrs	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	621a      	str	r2, [r3, #32]
}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b006      	add	sp, #24
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	223c      	movs	r2, #60	; 0x3c
 80023f4:	5c9b      	ldrb	r3, [r3, r2]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e032      	b.n	8002464 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	223c      	movs	r2, #60	; 0x3c
 8002402:	2101      	movs	r1, #1
 8002404:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	223d      	movs	r2, #61	; 0x3d
 800240a:	2102      	movs	r1, #2
 800240c:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2170      	movs	r1, #112	; 0x70
 800241a:	438a      	bics	r2, r1
 800241c:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2180      	movs	r1, #128	; 0x80
 800243c:	438a      	bics	r2, r1
 800243e:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6899      	ldr	r1, [r3, #8]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	223d      	movs	r2, #61	; 0x3d
 8002456:	2101      	movs	r1, #1
 8002458:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	223c      	movs	r2, #60	; 0x3c
 800245e:	2100      	movs	r1, #0
 8002460:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	0018      	movs	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	b002      	add	sp, #8
 800246a:	bd80      	pop	{r7, pc}

0800246c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002472:	f7fd fed5 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002476:	f000 f831 	bl	80024dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800247a:	f000 f959 	bl	8002730 <MX_GPIO_Init>
  MX_ADC_Init();
 800247e:	f000 f87d 	bl	800257c <MX_ADC_Init>
  MX_TIM2_Init();
 8002482:	f000 f8d5 	bl	8002630 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint16_t AD_Res = 0;
 8002486:	1dbb      	adds	r3, r7, #6
 8002488:	2200      	movs	r2, #0
 800248a:	801a      	strh	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800248c:	4b11      	ldr	r3, [pc, #68]	; (80024d4 <main+0x68>)
 800248e:	2100      	movs	r1, #0
 8002490:	0018      	movs	r0, r3
 8002492:	f7ff fa6b 	bl	800196c <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc);
 8002496:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <main+0x6c>)
 8002498:	0018      	movs	r0, r3
 800249a:	f7fe fadd 	bl	8000a58 <HAL_ADCEx_Calibration_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc);
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <main+0x6c>)
 80024a0:	0018      	movs	r0, r3
 80024a2:	f7fe f85f 	bl	8000564 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, 1);
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <main+0x6c>)
 80024a8:	2101      	movs	r1, #1
 80024aa:	0018      	movs	r0, r3
 80024ac:	f7fe f8ae 	bl	800060c <HAL_ADC_PollForConversion>
	  AD_Res = HAL_ADC_GetValue(&hadc);
 80024b0:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <main+0x6c>)
 80024b2:	0018      	movs	r0, r3
 80024b4:	f7fe f93a 	bl	800072c <HAL_ADC_GetValue>
 80024b8:	0002      	movs	r2, r0
 80024ba:	1dbb      	adds	r3, r7, #6
 80024bc:	801a      	strh	r2, [r3, #0]
	  TIM2->CCR1 = (AD_Res<<4);
 80024be:	1dbb      	adds	r3, r7, #6
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	011a      	lsls	r2, r3, #4
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	05db      	lsls	r3, r3, #23
 80024c8:	635a      	str	r2, [r3, #52]	; 0x34
      HAL_Delay(1);
 80024ca:	2001      	movs	r0, #1
 80024cc:	f7fd feee 	bl	80002ac <HAL_Delay>
	  HAL_ADC_Start(&hadc);
 80024d0:	e7e5      	b.n	800249e <main+0x32>
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	20000024 	.word	0x20000024
 80024d8:	20000064 	.word	0x20000064

080024dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b091      	sub	sp, #68	; 0x44
 80024e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024e2:	2410      	movs	r4, #16
 80024e4:	193b      	adds	r3, r7, r4
 80024e6:	0018      	movs	r0, r3
 80024e8:	2330      	movs	r3, #48	; 0x30
 80024ea:	001a      	movs	r2, r3
 80024ec:	2100      	movs	r1, #0
 80024ee:	f000 faf1 	bl	8002ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024f2:	003b      	movs	r3, r7
 80024f4:	0018      	movs	r0, r3
 80024f6:	2310      	movs	r3, #16
 80024f8:	001a      	movs	r2, r3
 80024fa:	2100      	movs	r1, #0
 80024fc:	f000 faea 	bl	8002ad4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002500:	0021      	movs	r1, r4
 8002502:	187b      	adds	r3, r7, r1
 8002504:	2212      	movs	r2, #18
 8002506:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002508:	187b      	adds	r3, r7, r1
 800250a:	2201      	movs	r2, #1
 800250c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800250e:	187b      	adds	r3, r7, r1
 8002510:	2201      	movs	r2, #1
 8002512:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002514:	187b      	adds	r3, r7, r1
 8002516:	2210      	movs	r2, #16
 8002518:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800251a:	187b      	adds	r3, r7, r1
 800251c:	2210      	movs	r2, #16
 800251e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002520:	187b      	adds	r3, r7, r1
 8002522:	2202      	movs	r2, #2
 8002524:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002526:	187b      	adds	r3, r7, r1
 8002528:	2200      	movs	r2, #0
 800252a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800252c:	187b      	adds	r3, r7, r1
 800252e:	22a0      	movs	r2, #160	; 0xa0
 8002530:	0392      	lsls	r2, r2, #14
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002534:	187b      	adds	r3, r7, r1
 8002536:	2200      	movs	r2, #0
 8002538:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800253a:	187b      	adds	r3, r7, r1
 800253c:	0018      	movs	r0, r3
 800253e:	f7fe fd6b 	bl	8001018 <HAL_RCC_OscConfig>
 8002542:	1e03      	subs	r3, r0, #0
 8002544:	d001      	beq.n	800254a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002546:	f000 f94f 	bl	80027e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800254a:	003b      	movs	r3, r7
 800254c:	2207      	movs	r2, #7
 800254e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002550:	003b      	movs	r3, r7
 8002552:	2202      	movs	r2, #2
 8002554:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002556:	003b      	movs	r3, r7
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800255c:	003b      	movs	r3, r7
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002562:	003b      	movs	r3, r7
 8002564:	2101      	movs	r1, #1
 8002566:	0018      	movs	r0, r3
 8002568:	f7ff f84a 	bl	8001600 <HAL_RCC_ClockConfig>
 800256c:	1e03      	subs	r3, r0, #0
 800256e:	d001      	beq.n	8002574 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002570:	f000 f93a 	bl	80027e8 <Error_Handler>
  }
}
 8002574:	46c0      	nop			; (mov r8, r8)
 8002576:	46bd      	mov	sp, r7
 8002578:	b011      	add	sp, #68	; 0x44
 800257a:	bd90      	pop	{r4, r7, pc}

0800257c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	0018      	movs	r0, r3
 8002586:	230c      	movs	r3, #12
 8002588:	001a      	movs	r2, r3
 800258a:	2100      	movs	r1, #0
 800258c:	f000 faa2 	bl	8002ad4 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8002590:	4b25      	ldr	r3, [pc, #148]	; (8002628 <MX_ADC_Init+0xac>)
 8002592:	4a26      	ldr	r2, [pc, #152]	; (800262c <MX_ADC_Init+0xb0>)
 8002594:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002596:	4b24      	ldr	r3, [pc, #144]	; (8002628 <MX_ADC_Init+0xac>)
 8002598:	2200      	movs	r2, #0
 800259a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800259c:	4b22      	ldr	r3, [pc, #136]	; (8002628 <MX_ADC_Init+0xac>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025a2:	4b21      	ldr	r3, [pc, #132]	; (8002628 <MX_ADC_Init+0xac>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80025a8:	4b1f      	ldr	r3, [pc, #124]	; (8002628 <MX_ADC_Init+0xac>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025ae:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <MX_ADC_Init+0xac>)
 80025b0:	2204      	movs	r2, #4
 80025b2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80025b4:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <MX_ADC_Init+0xac>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80025ba:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <MX_ADC_Init+0xac>)
 80025bc:	2200      	movs	r2, #0
 80025be:	61da      	str	r2, [r3, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <MX_ADC_Init+0xac>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	621a      	str	r2, [r3, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80025c6:	4b18      	ldr	r3, [pc, #96]	; (8002628 <MX_ADC_Init+0xac>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025cc:	4b16      	ldr	r3, [pc, #88]	; (8002628 <MX_ADC_Init+0xac>)
 80025ce:	22c2      	movs	r2, #194	; 0xc2
 80025d0:	32ff      	adds	r2, #255	; 0xff
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025d4:	4b14      	ldr	r3, [pc, #80]	; (8002628 <MX_ADC_Init+0xac>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 80025da:	4b13      	ldr	r3, [pc, #76]	; (8002628 <MX_ADC_Init+0xac>)
 80025dc:	2200      	movs	r2, #0
 80025de:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80025e0:	4b11      	ldr	r3, [pc, #68]	; (8002628 <MX_ADC_Init+0xac>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <MX_ADC_Init+0xac>)
 80025e8:	0018      	movs	r0, r3
 80025ea:	f7fd fe7d 	bl	80002e8 <HAL_ADC_Init>
 80025ee:	1e03      	subs	r3, r0, #0
 80025f0:	d001      	beq.n	80025f6 <MX_ADC_Init+0x7a>
  {
    Error_Handler();
 80025f2:	f000 f8f9 	bl	80027e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	2207      	movs	r2, #7
 80025fa:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	2280      	movs	r2, #128	; 0x80
 8002600:	0152      	lsls	r2, r2, #5
 8002602:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	2280      	movs	r2, #128	; 0x80
 8002608:	0552      	lsls	r2, r2, #21
 800260a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800260c:	1d3a      	adds	r2, r7, #4
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <MX_ADC_Init+0xac>)
 8002610:	0011      	movs	r1, r2
 8002612:	0018      	movs	r0, r3
 8002614:	f7fe f896 	bl	8000744 <HAL_ADC_ConfigChannel>
 8002618:	1e03      	subs	r3, r0, #0
 800261a:	d001      	beq.n	8002620 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800261c:	f000 f8e4 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b004      	add	sp, #16
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000064 	.word	0x20000064
 800262c:	40012400 	.word	0x40012400

08002630 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08e      	sub	sp, #56	; 0x38
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002636:	2328      	movs	r3, #40	; 0x28
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	0018      	movs	r0, r3
 800263c:	2310      	movs	r3, #16
 800263e:	001a      	movs	r2, r3
 8002640:	2100      	movs	r1, #0
 8002642:	f000 fa47 	bl	8002ad4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002646:	2320      	movs	r3, #32
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	0018      	movs	r0, r3
 800264c:	2308      	movs	r3, #8
 800264e:	001a      	movs	r2, r3
 8002650:	2100      	movs	r1, #0
 8002652:	f000 fa3f 	bl	8002ad4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	0018      	movs	r0, r3
 800265a:	231c      	movs	r3, #28
 800265c:	001a      	movs	r2, r3
 800265e:	2100      	movs	r1, #0
 8002660:	f000 fa38 	bl	8002ad4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002664:	4b30      	ldr	r3, [pc, #192]	; (8002728 <MX_TIM2_Init+0xf8>)
 8002666:	2280      	movs	r2, #128	; 0x80
 8002668:	05d2      	lsls	r2, r2, #23
 800266a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 800266c:	4b2e      	ldr	r3, [pc, #184]	; (8002728 <MX_TIM2_Init+0xf8>)
 800266e:	2209      	movs	r2, #9
 8002670:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002672:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <MX_TIM2_Init+0xf8>)
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002678:	4b2b      	ldr	r3, [pc, #172]	; (8002728 <MX_TIM2_Init+0xf8>)
 800267a:	4a2c      	ldr	r2, [pc, #176]	; (800272c <MX_TIM2_Init+0xfc>)
 800267c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800267e:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <MX_TIM2_Init+0xf8>)
 8002680:	2200      	movs	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002684:	4b28      	ldr	r3, [pc, #160]	; (8002728 <MX_TIM2_Init+0xf8>)
 8002686:	2280      	movs	r2, #128	; 0x80
 8002688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800268a:	4b27      	ldr	r3, [pc, #156]	; (8002728 <MX_TIM2_Init+0xf8>)
 800268c:	0018      	movs	r0, r3
 800268e:	f7ff f90d 	bl	80018ac <HAL_TIM_Base_Init>
 8002692:	1e03      	subs	r3, r0, #0
 8002694:	d001      	beq.n	800269a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002696:	f000 f8a7 	bl	80027e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800269a:	2128      	movs	r1, #40	; 0x28
 800269c:	187b      	adds	r3, r7, r1
 800269e:	2280      	movs	r2, #128	; 0x80
 80026a0:	0152      	lsls	r2, r2, #5
 80026a2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026a4:	187a      	adds	r2, r7, r1
 80026a6:	4b20      	ldr	r3, [pc, #128]	; (8002728 <MX_TIM2_Init+0xf8>)
 80026a8:	0011      	movs	r1, r2
 80026aa:	0018      	movs	r0, r3
 80026ac:	f7ff fa5a 	bl	8001b64 <HAL_TIM_ConfigClockSource>
 80026b0:	1e03      	subs	r3, r0, #0
 80026b2:	d001      	beq.n	80026b8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80026b4:	f000 f898 	bl	80027e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80026b8:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <MX_TIM2_Init+0xf8>)
 80026ba:	0018      	movs	r0, r3
 80026bc:	f7ff f922 	bl	8001904 <HAL_TIM_PWM_Init>
 80026c0:	1e03      	subs	r3, r0, #0
 80026c2:	d001      	beq.n	80026c8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80026c4:	f000 f890 	bl	80027e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c8:	2120      	movs	r1, #32
 80026ca:	187b      	adds	r3, r7, r1
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d0:	187b      	adds	r3, r7, r1
 80026d2:	2200      	movs	r2, #0
 80026d4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026d6:	187a      	adds	r2, r7, r1
 80026d8:	4b13      	ldr	r3, [pc, #76]	; (8002728 <MX_TIM2_Init+0xf8>)
 80026da:	0011      	movs	r1, r2
 80026dc:	0018      	movs	r0, r3
 80026de:	f7ff fe82 	bl	80023e6 <HAL_TIMEx_MasterConfigSynchronization>
 80026e2:	1e03      	subs	r3, r0, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80026e6:	f000 f87f 	bl	80027e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	2260      	movs	r2, #96	; 0x60
 80026ee:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80026f0:	1d3b      	adds	r3, r7, #4
 80026f2:	2200      	movs	r2, #0
 80026f4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	2200      	movs	r2, #0
 80026fa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026fc:	1d3b      	adds	r3, r7, #4
 80026fe:	2200      	movs	r2, #0
 8002700:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002702:	1d39      	adds	r1, r7, #4
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <MX_TIM2_Init+0xf8>)
 8002706:	2200      	movs	r2, #0
 8002708:	0018      	movs	r0, r3
 800270a:	f7ff f973 	bl	80019f4 <HAL_TIM_PWM_ConfigChannel>
 800270e:	1e03      	subs	r3, r0, #0
 8002710:	d001      	beq.n	8002716 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8002712:	f000 f869 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002716:	4b04      	ldr	r3, [pc, #16]	; (8002728 <MX_TIM2_Init+0xf8>)
 8002718:	0018      	movs	r0, r3
 800271a:	f000 f8f1 	bl	8002900 <HAL_TIM_MspPostInit>

}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	46bd      	mov	sp, r7
 8002722:	b00e      	add	sp, #56	; 0x38
 8002724:	bd80      	pop	{r7, pc}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	20000024 	.word	0x20000024
 800272c:	0000ffff 	.word	0x0000ffff

08002730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b089      	sub	sp, #36	; 0x24
 8002734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002736:	240c      	movs	r4, #12
 8002738:	193b      	adds	r3, r7, r4
 800273a:	0018      	movs	r0, r3
 800273c:	2314      	movs	r3, #20
 800273e:	001a      	movs	r2, r3
 8002740:	2100      	movs	r1, #0
 8002742:	f000 f9c7 	bl	8002ad4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002746:	4b25      	ldr	r3, [pc, #148]	; (80027dc <MX_GPIO_Init+0xac>)
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	4b24      	ldr	r3, [pc, #144]	; (80027dc <MX_GPIO_Init+0xac>)
 800274c:	2180      	movs	r1, #128	; 0x80
 800274e:	0289      	lsls	r1, r1, #10
 8002750:	430a      	orrs	r2, r1
 8002752:	615a      	str	r2, [r3, #20]
 8002754:	4b21      	ldr	r3, [pc, #132]	; (80027dc <MX_GPIO_Init+0xac>)
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	029b      	lsls	r3, r3, #10
 800275c:	4013      	ands	r3, r2
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002762:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <MX_GPIO_Init+0xac>)
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <MX_GPIO_Init+0xac>)
 8002768:	2180      	movs	r1, #128	; 0x80
 800276a:	0309      	lsls	r1, r1, #12
 800276c:	430a      	orrs	r2, r1
 800276e:	615a      	str	r2, [r3, #20]
 8002770:	4b1a      	ldr	r3, [pc, #104]	; (80027dc <MX_GPIO_Init+0xac>)
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	031b      	lsls	r3, r3, #12
 8002778:	4013      	ands	r3, r2
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800277e:	23c0      	movs	r3, #192	; 0xc0
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4817      	ldr	r0, [pc, #92]	; (80027e0 <MX_GPIO_Init+0xb0>)
 8002784:	2200      	movs	r2, #0
 8002786:	0019      	movs	r1, r3
 8002788:	f7fe fc28 	bl	8000fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800278c:	193b      	adds	r3, r7, r4
 800278e:	2201      	movs	r2, #1
 8002790:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002792:	193b      	adds	r3, r7, r4
 8002794:	4a13      	ldr	r2, [pc, #76]	; (80027e4 <MX_GPIO_Init+0xb4>)
 8002796:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	193b      	adds	r3, r7, r4
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800279e:	193a      	adds	r2, r7, r4
 80027a0:	2390      	movs	r3, #144	; 0x90
 80027a2:	05db      	lsls	r3, r3, #23
 80027a4:	0011      	movs	r1, r2
 80027a6:	0018      	movs	r0, r3
 80027a8:	f7fe faa4 	bl	8000cf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80027ac:	0021      	movs	r1, r4
 80027ae:	187b      	adds	r3, r7, r1
 80027b0:	22c0      	movs	r2, #192	; 0xc0
 80027b2:	0092      	lsls	r2, r2, #2
 80027b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b6:	187b      	adds	r3, r7, r1
 80027b8:	2201      	movs	r2, #1
 80027ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	187b      	adds	r3, r7, r1
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c2:	187b      	adds	r3, r7, r1
 80027c4:	2200      	movs	r2, #0
 80027c6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c8:	187b      	adds	r3, r7, r1
 80027ca:	4a05      	ldr	r2, [pc, #20]	; (80027e0 <MX_GPIO_Init+0xb0>)
 80027cc:	0019      	movs	r1, r3
 80027ce:	0010      	movs	r0, r2
 80027d0:	f7fe fa90 	bl	8000cf4 <HAL_GPIO_Init>

}
 80027d4:	46c0      	nop			; (mov r8, r8)
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b009      	add	sp, #36	; 0x24
 80027da:	bd90      	pop	{r4, r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	48000800 	.word	0x48000800
 80027e4:	10120000 	.word	0x10120000

080027e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027ec:	46c0      	nop			; (mov r8, r8)
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fa:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <HAL_MspInit+0x44>)
 80027fc:	699a      	ldr	r2, [r3, #24]
 80027fe:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <HAL_MspInit+0x44>)
 8002800:	2101      	movs	r1, #1
 8002802:	430a      	orrs	r2, r1
 8002804:	619a      	str	r2, [r3, #24]
 8002806:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <HAL_MspInit+0x44>)
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2201      	movs	r2, #1
 800280c:	4013      	ands	r3, r2
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002812:	4b09      	ldr	r3, [pc, #36]	; (8002838 <HAL_MspInit+0x44>)
 8002814:	69da      	ldr	r2, [r3, #28]
 8002816:	4b08      	ldr	r3, [pc, #32]	; (8002838 <HAL_MspInit+0x44>)
 8002818:	2180      	movs	r1, #128	; 0x80
 800281a:	0549      	lsls	r1, r1, #21
 800281c:	430a      	orrs	r2, r1
 800281e:	61da      	str	r2, [r3, #28]
 8002820:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_MspInit+0x44>)
 8002822:	69da      	ldr	r2, [r3, #28]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	055b      	lsls	r3, r3, #21
 8002828:	4013      	ands	r3, r2
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	46bd      	mov	sp, r7
 8002832:	b002      	add	sp, #8
 8002834:	bd80      	pop	{r7, pc}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	40021000 	.word	0x40021000

0800283c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08a      	sub	sp, #40	; 0x28
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002844:	2314      	movs	r3, #20
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	0018      	movs	r0, r3
 800284a:	2314      	movs	r3, #20
 800284c:	001a      	movs	r2, r3
 800284e:	2100      	movs	r1, #0
 8002850:	f000 f940 	bl	8002ad4 <memset>
  if(hadc->Instance==ADC1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a19      	ldr	r2, [pc, #100]	; (80028c0 <HAL_ADC_MspInit+0x84>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d12c      	bne.n	80028b8 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800285e:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <HAL_ADC_MspInit+0x88>)
 8002860:	699a      	ldr	r2, [r3, #24]
 8002862:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <HAL_ADC_MspInit+0x88>)
 8002864:	2180      	movs	r1, #128	; 0x80
 8002866:	0089      	lsls	r1, r1, #2
 8002868:	430a      	orrs	r2, r1
 800286a:	619a      	str	r2, [r3, #24]
 800286c:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <HAL_ADC_MspInit+0x88>)
 800286e:	699a      	ldr	r2, [r3, #24]
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_ADC_MspInit+0x88>)
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <HAL_ADC_MspInit+0x88>)
 8002880:	2180      	movs	r1, #128	; 0x80
 8002882:	0289      	lsls	r1, r1, #10
 8002884:	430a      	orrs	r2, r1
 8002886:	615a      	str	r2, [r3, #20]
 8002888:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <HAL_ADC_MspInit+0x88>)
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	029b      	lsls	r3, r3, #10
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA7     ------> ADC_IN7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002896:	2114      	movs	r1, #20
 8002898:	187b      	adds	r3, r7, r1
 800289a:	2280      	movs	r2, #128	; 0x80
 800289c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800289e:	187b      	adds	r3, r7, r1
 80028a0:	2203      	movs	r2, #3
 80028a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	187b      	adds	r3, r7, r1
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028aa:	187a      	adds	r2, r7, r1
 80028ac:	2390      	movs	r3, #144	; 0x90
 80028ae:	05db      	lsls	r3, r3, #23
 80028b0:	0011      	movs	r1, r2
 80028b2:	0018      	movs	r0, r3
 80028b4:	f7fe fa1e 	bl	8000cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028b8:	46c0      	nop			; (mov r8, r8)
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b00a      	add	sp, #40	; 0x28
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40012400 	.word	0x40012400
 80028c4:	40021000 	.word	0x40021000

080028c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	05db      	lsls	r3, r3, #23
 80028d8:	429a      	cmp	r2, r3
 80028da:	d10b      	bne.n	80028f4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028dc:	4b07      	ldr	r3, [pc, #28]	; (80028fc <HAL_TIM_Base_MspInit+0x34>)
 80028de:	69da      	ldr	r2, [r3, #28]
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_TIM_Base_MspInit+0x34>)
 80028e2:	2101      	movs	r1, #1
 80028e4:	430a      	orrs	r2, r1
 80028e6:	61da      	str	r2, [r3, #28]
 80028e8:	4b04      	ldr	r3, [pc, #16]	; (80028fc <HAL_TIM_Base_MspInit+0x34>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	2201      	movs	r2, #1
 80028ee:	4013      	ands	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80028f4:	46c0      	nop			; (mov r8, r8)
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b004      	add	sp, #16
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40021000 	.word	0x40021000

08002900 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	230c      	movs	r3, #12
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	0018      	movs	r0, r3
 800290e:	2314      	movs	r3, #20
 8002910:	001a      	movs	r2, r3
 8002912:	2100      	movs	r1, #0
 8002914:	f000 f8de 	bl	8002ad4 <memset>
  if(htim->Instance==TIM2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	05db      	lsls	r3, r3, #23
 8002920:	429a      	cmp	r2, r3
 8002922:	d124      	bne.n	800296e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002924:	4b14      	ldr	r3, [pc, #80]	; (8002978 <HAL_TIM_MspPostInit+0x78>)
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	4b13      	ldr	r3, [pc, #76]	; (8002978 <HAL_TIM_MspPostInit+0x78>)
 800292a:	2180      	movs	r1, #128	; 0x80
 800292c:	0289      	lsls	r1, r1, #10
 800292e:	430a      	orrs	r2, r1
 8002930:	615a      	str	r2, [r3, #20]
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <HAL_TIM_MspPostInit+0x78>)
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	029b      	lsls	r3, r3, #10
 800293a:	4013      	ands	r3, r2
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002940:	210c      	movs	r1, #12
 8002942:	187b      	adds	r3, r7, r1
 8002944:	2220      	movs	r2, #32
 8002946:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002948:	187b      	adds	r3, r7, r1
 800294a:	2202      	movs	r2, #2
 800294c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	187b      	adds	r3, r7, r1
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002954:	187b      	adds	r3, r7, r1
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800295a:	187b      	adds	r3, r7, r1
 800295c:	2202      	movs	r2, #2
 800295e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002960:	187a      	adds	r2, r7, r1
 8002962:	2390      	movs	r3, #144	; 0x90
 8002964:	05db      	lsls	r3, r3, #23
 8002966:	0011      	movs	r1, r2
 8002968:	0018      	movs	r0, r3
 800296a:	f7fe f9c3 	bl	8000cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	46bd      	mov	sp, r7
 8002972:	b008      	add	sp, #32
 8002974:	bd80      	pop	{r7, pc}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	40021000 	.word	0x40021000

0800297c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002980:	46c0      	nop			; (mov r8, r8)
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800298a:	e7fe      	b.n	800298a <HardFault_Handler+0x4>

0800298c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002990:	46c0      	nop			; (mov r8, r8)
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029a4:	f7fd fc6c 	bl	8000280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029a8:	46c0      	nop			; (mov r8, r8)
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
	...

080029b0 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80029b4:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <SystemInit+0x70>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <SystemInit+0x70>)
 80029ba:	2101      	movs	r1, #1
 80029bc:	430a      	orrs	r2, r1
 80029be:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 80029c0:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <SystemInit+0x70>)
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <SystemInit+0x70>)
 80029c6:	4917      	ldr	r1, [pc, #92]	; (8002a24 <SystemInit+0x74>)
 80029c8:	400a      	ands	r2, r1
 80029ca:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80029cc:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <SystemInit+0x70>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <SystemInit+0x70>)
 80029d2:	4915      	ldr	r1, [pc, #84]	; (8002a28 <SystemInit+0x78>)
 80029d4:	400a      	ands	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80029d8:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <SystemInit+0x70>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <SystemInit+0x70>)
 80029de:	4913      	ldr	r1, [pc, #76]	; (8002a2c <SystemInit+0x7c>)
 80029e0:	400a      	ands	r2, r1
 80029e2:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <SystemInit+0x70>)
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	4b0d      	ldr	r3, [pc, #52]	; (8002a20 <SystemInit+0x70>)
 80029ea:	4911      	ldr	r1, [pc, #68]	; (8002a30 <SystemInit+0x80>)
 80029ec:	400a      	ands	r2, r1
 80029ee:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <SystemInit+0x70>)
 80029f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <SystemInit+0x70>)
 80029f6:	210f      	movs	r1, #15
 80029f8:	438a      	bics	r2, r1
 80029fa:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 80029fc:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <SystemInit+0x70>)
 80029fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a00:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <SystemInit+0x70>)
 8002a02:	490c      	ldr	r1, [pc, #48]	; (8002a34 <SystemInit+0x84>)
 8002a04:	400a      	ands	r2, r1
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <SystemInit+0x70>)
 8002a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a0c:	4b04      	ldr	r3, [pc, #16]	; (8002a20 <SystemInit+0x70>)
 8002a0e:	2101      	movs	r1, #1
 8002a10:	438a      	bics	r2, r1
 8002a12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002a14:	4b02      	ldr	r3, [pc, #8]	; (8002a20 <SystemInit+0x70>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]

}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40021000 	.word	0x40021000
 8002a24:	f8ffb80c 	.word	0xf8ffb80c
 8002a28:	fef6ffff 	.word	0xfef6ffff
 8002a2c:	fffbffff 	.word	0xfffbffff
 8002a30:	ffc0ffff 	.word	0xffc0ffff
 8002a34:	fffffeac 	.word	0xfffffeac

08002a38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a38:	480d      	ldr	r0, [pc, #52]	; (8002a70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a3c:	480d      	ldr	r0, [pc, #52]	; (8002a74 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a3e:	490e      	ldr	r1, [pc, #56]	; (8002a78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a40:	4a0e      	ldr	r2, [pc, #56]	; (8002a7c <LoopForever+0xe>)
  movs r3, #0
 8002a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a44:	e002      	b.n	8002a4c <LoopCopyDataInit>

08002a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a4a:	3304      	adds	r3, #4

08002a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a50:	d3f9      	bcc.n	8002a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a52:	4a0b      	ldr	r2, [pc, #44]	; (8002a80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a54:	4c0b      	ldr	r4, [pc, #44]	; (8002a84 <LoopForever+0x16>)
  movs r3, #0
 8002a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a58:	e001      	b.n	8002a5e <LoopFillZerobss>

08002a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a5c:	3204      	adds	r2, #4

08002a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a60:	d3fb      	bcc.n	8002a5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a62:	f7ff ffa5 	bl	80029b0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002a66:	f000 f811 	bl	8002a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a6a:	f7ff fcff 	bl	800246c <main>

08002a6e <LoopForever>:

LoopForever:
    b LoopForever
 8002a6e:	e7fe      	b.n	8002a6e <LoopForever>
  ldr   r0, =_estack
 8002a70:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a78:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002a7c:	08002b34 	.word	0x08002b34
  ldr r2, =_sbss
 8002a80:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002a84:	200000b0 	.word	0x200000b0

08002a88 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a88:	e7fe      	b.n	8002a88 <ADC1_COMP_IRQHandler>
	...

08002a8c <__libc_init_array>:
 8002a8c:	b570      	push	{r4, r5, r6, lr}
 8002a8e:	2600      	movs	r6, #0
 8002a90:	4d0c      	ldr	r5, [pc, #48]	; (8002ac4 <__libc_init_array+0x38>)
 8002a92:	4c0d      	ldr	r4, [pc, #52]	; (8002ac8 <__libc_init_array+0x3c>)
 8002a94:	1b64      	subs	r4, r4, r5
 8002a96:	10a4      	asrs	r4, r4, #2
 8002a98:	42a6      	cmp	r6, r4
 8002a9a:	d109      	bne.n	8002ab0 <__libc_init_array+0x24>
 8002a9c:	2600      	movs	r6, #0
 8002a9e:	f000 f821 	bl	8002ae4 <_init>
 8002aa2:	4d0a      	ldr	r5, [pc, #40]	; (8002acc <__libc_init_array+0x40>)
 8002aa4:	4c0a      	ldr	r4, [pc, #40]	; (8002ad0 <__libc_init_array+0x44>)
 8002aa6:	1b64      	subs	r4, r4, r5
 8002aa8:	10a4      	asrs	r4, r4, #2
 8002aaa:	42a6      	cmp	r6, r4
 8002aac:	d105      	bne.n	8002aba <__libc_init_array+0x2e>
 8002aae:	bd70      	pop	{r4, r5, r6, pc}
 8002ab0:	00b3      	lsls	r3, r6, #2
 8002ab2:	58eb      	ldr	r3, [r5, r3]
 8002ab4:	4798      	blx	r3
 8002ab6:	3601      	adds	r6, #1
 8002ab8:	e7ee      	b.n	8002a98 <__libc_init_array+0xc>
 8002aba:	00b3      	lsls	r3, r6, #2
 8002abc:	58eb      	ldr	r3, [r5, r3]
 8002abe:	4798      	blx	r3
 8002ac0:	3601      	adds	r6, #1
 8002ac2:	e7f2      	b.n	8002aaa <__libc_init_array+0x1e>
 8002ac4:	08002b2c 	.word	0x08002b2c
 8002ac8:	08002b2c 	.word	0x08002b2c
 8002acc:	08002b2c 	.word	0x08002b2c
 8002ad0:	08002b30 	.word	0x08002b30

08002ad4 <memset>:
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	1812      	adds	r2, r2, r0
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d100      	bne.n	8002ade <memset+0xa>
 8002adc:	4770      	bx	lr
 8002ade:	7019      	strb	r1, [r3, #0]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	e7f9      	b.n	8002ad8 <memset+0x4>

08002ae4 <_init>:
 8002ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aea:	bc08      	pop	{r3}
 8002aec:	469e      	mov	lr, r3
 8002aee:	4770      	bx	lr

08002af0 <_fini>:
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002af6:	bc08      	pop	{r3}
 8002af8:	469e      	mov	lr, r3
 8002afa:	4770      	bx	lr
